Process notes for Issue Index Application
==========================================




About Process Notes
===================
Process Notes is documentation of the procedure I take when creating my apps, in this case the "Issue Index Application". 
Though this might seem like a bit of extra work, documenting my creation of the app from start to finish has proven to be 
extremely valuable in bug hunting and refining my workflow for future use. I have tried to break down my process into "phases" 
with at least several steps to accomplish that phase before moving on. Each step documents what I do. At the end of the phase
I like to jot down special notes (if any) for future reference and comparison. I also have additional resources with links for 
solutions to issues I come across for reference.




Objective and User Story
=========================
The objective of this application is to provide an accessible "index of issues and solutions" for a given project (which could be anything). 
The user would visit the main page and be presented with recent additions, categories, and individual issues to browser. There would be search
functionality for categories and issues. The user would have the ability to add categories and issues and have the ability to edit or remove
categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource by nature.




Process Workflow Summary
========================

    Phase 1: Project Setup.
    Phase 2: Setup MVC file structure.
    Phase 3: Create and configure express app 
    Phase 4: Setup initial server.
    Phase 5: Create a index router and route.



Phase 1: Project Setup
=========================================================================================
 * Basic setup, installation of dependencies, development environment setup, and essential 
   files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1.1:  Issue-Index-App                                     -- Create a folder to store you application.
        1.2:  npm init                                            -- Create a package.json file to start the project off.

    // Install express:
        1.3:  npm install express                                 -- Install express.

    // Add .gitignore file for node_modules:        
        1.4:  .gitignore > node_modules                           -- Tell git to ignore node_modules folder.
        1.5:  npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        1.6:  "devStart": "nodemon server.js"                     -- Run development environment (npm run devStart).
        1.7:  "start": "node server.js"                           -- Run server normally in a production environment (npm run start).
        
    // Create initial application files:       
        1.8:   server.js                                          -- Create main server file.
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * Submit everything AFTER you create the .gitignore file and add node_modules.
            * Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * You can have multiple custom scripts. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    




Phase 2: Setup MVC file structure
==========================================================================================================
 * For larger application, use MVC (Model View Contoller) file structure for efficientcy and consistency.
==========================================================================================================

        2.1: Create MVC folders:
            * The "models" folder will contain mongoose schemas and models.
            * The "views" folder will contain different views of the files (i.e. ejs files, etc).
            * The "routes" folder will contain controllers (i.e. CRUD routes).
                --------------------
                    models            -  (M)odels
                    views             -- (V)iews
                    routes            -- (C)ontroller 
                --------------------

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:             
          * Quick note about MVC: Model View Controller is a design pattern for our application. Currently, we have 
            View (i.e. "views" folder) and Controller (i.e. "routes" folder). We will also need a Model ("models" folder) 
            to house all our database models to complete the design pattern.

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  




Phase 3: Create and configure express app
=============================================================================================================
  * Create express application, import inti set configuration settings, and middlewares.
=============================================================================================================


    3.1: Import initial libraries in server.js:
                ---------------------------------------------------------
                    const express = require('express');                       -- imports express from express library.
                    const app = express();                                    -- get the app portion from the express librrary to instantiate the app.
                ---------------------------------------------------------      


    3.2 Configure your app:                    

            // Use "public" file to store static resources:
                * Additionally, we want to tell express where all our public files are going to be when 
                  requested by the client.
                -------------------------------------------------
                    app.use(express.static('public'));                    -- static files will be kep in the folder "public"
                -------------------------------------------------

            // Create a "public" folder:     
                * The "public" folder is used to serve static files. This going to be where all the public files 
                  like stylesheets, javascript, images, etc.
                ----------------
                    public               -- Folder for storing static assets
                ----------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * When you import libraries, you are essentially importing the packages you have installed via npm.
            * These are not the only libraries added nore the only middleware to be used. However, I find it easier to load the intial libraries 
              first and then add in libraries as you go along (i.e. mongoose, etc.) because then you can keep track of the process and make sure 
              you dont miss anything.          
            * When you configure your app, you are setting the settings such as the behavior of the app (in 
              the case of views and view engines), etc. You use the "app.set()" and assign a name and a value.
            * At this point, you are also adding corresponding features such as folders and middleware.
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    




Phase 4: Setup initial server
=============================================================================================================
-- Create a server to listen on a given port and test the connection.
=============================================================================================================

    4.1: Create a basic server:
        ----------------------------------------------------------                     ----------------------------------------------------------
            app.listen(3000, function() {                                                 let server; 
                console.log('Your app is listening on port 3000');         or...          server = app.listen(3000, function() {   
            });                                                                               console.log(`Listening on port 3000...`);   
        ----------------------------------------------------------                        });
                                                                                       ----------------------------------------------------------
      
    4.2: Test your connection:
        * In gitbash, you will can run the server by running the custom script "devStart" with "npm run devStart".
        * Remember that using "devStart" will enable nodemon so your server will reset after each change made to the code.
            -----------------------------------------------------------------------
                $ npm run devStart

                > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                > nodemon server.js

                [nodemon] 2.0.2
                [nodemon] to restart at any time, enter `rs`
                [nodemon] watching dir(s): *.*
                [nodemon] watching extensions: js,mjs,json
                [nodemon] starting `node server.js`
                Your app is listening on port 3000
            -----------------------------------------------------------------------


    4.3: Test your application in browser:
        * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
          but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note: It's a bit easier just to do the second method because integrated testing should be standard practice so this
              adds a bit of future proofing to the code.             
            * So for the intial set-up of the server, you can initially setup a basic app.listen and the port number. However, if
              you want to run integration tests later, you will need to configure your server in a more complex way. Procedurally, 
              it makes the most sense when I get to this point to then add in the elements that will make this work now. 
            * If you want to get in the habit of creating a server and account for EVENTUAL test integration, creating the server the second way
              in step 2.2 is preferable. When the time comes, you would simply need to replace the port number (i.e. 3000) and the message when you
              integrate this into the runServer function.  
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 5: Create a index router and route.
=============================================================================================================
-- Create a Router with a routes folder and initial route file index.js to better organize 
   the routes we have instead of collecting everything in the server.js folder. 
=============================================================================================================

    5.1: Create an "index" route:
        * Use "index.js" in "routes" as a catch-all for everything that doesnt have a resource or a model.
            ---------------------------------------------------
                routes  >  index.js                                         -- index.js route for catch-alls.
            --------------------------------------------------- 
    

    5.2: In index.js, load the express and router and export:
        * Hooking up the router will let you link the "index.js" file to the "server.js" file and "indexRouter" 
          (in server.js) will be set to "router" (in server.js). 
            ----------------------------------------------------
                const express = require('express');                          -- load express.
                const router = express.Router();                             -- load router portion of express.

                modules.exports = router;                                    -- exports 
            ----------------------------------------------------


    5.3: Hook up the application to the router in server.js:
            ----------------------------------------------------
                const indexRouter = require("./routes/index");               -- Hooks up application to the index.js file in the routes folder.
            ----------------------------------------------------


    5.4: Add indexRouter middleware so that the application can use it:
        * Now that router is hooked up to server.js, the application now needs to be able to use it with this middleware.
        * In the case below, the root path "/" and the router to handle that route is "indexRouter".
            ----------------------------------------------------
                app.use("/", indexRouter);                                   -- middleware says that for root request, use indexRouter.
            ----------------------------------------------------


    5.5: Create a test route to the root of the application (i.e. '/'):
        * This is a temporary route to make sure everything is connected correctly.
            ----------------------------------------------------
                router.get('/', function(req, res) {                          -- Should return "This is a test" in your localhost root request.
                    res.send('This is a test')
                });
            ----------------------------------------------------


    5.6: Test the route.
        * To test the route, simply go to localhost:3000 in your browser and see if the basic message appears.
            ----------------------------------------------------
                localhost:3000   >   This is a test
            ----------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Create a Router with a routes folder and initial route file index.js to better organize 
              the routes we have instead of collecting everything in the server.js folder. 
            * When assigning the name as "indexRouter" and as a value pass in the relative path (i.e. "./routes/index").
            * Note that "./" is relative to where the route is.
            * Notice when you put in the initial relative path (./), intellesense will show you the folders and the file.
            * For more information on express router, see my study that outlines a basic setup: https://github.com/john-azzaro/Study-Express-Router
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 6: Configure app for ejs.
=============================================================================================================
--  For this application, we're going to be using a template engine called ejs that will allow us to reuse
    outr HTML over many pages without having to repeat our code.
=============================================================================================================


    6.1: Install ejs and express-js-layouts with npm:   
                --------------------------------------------------
                    npm install ejs express-ejs-layouts                 -- Install "ejs" and "express-ejs-layouts"                                                                
                --------------------------------------------------
         

    6.2: Set view engine to ejs: 
                -----------------------------------------------
                    app.set("view engine", "ejs");                     -- sets the view engine
                -----------------------------------------------


    6.3: Import expressLayouts:
        * To use ejs in an express application, we need to load the express-ejs-layouts library we just installed via npm.
                -------------------------------------------------------------
                    const expressLayouts = require('express-ejs-layouts');          -- import the express layouts package.
                -------------------------------------------------------------  


    6.4: Use express layouts (middleware):
        * Tell the application that we want to use "express layouts":
                -----------------------------------------
                    app.use(expressLayouts);                    -- use expressLayouts we imported for use in the app.
                -----------------------------------------


    6.5: Set "layouts" file in "views":
        * A layout file will allow use to reuse HTML like the header and the footer.
                ----------------------------------------------
                    app.set("layout", "layouts/layout");                 -- sets layout file in layouts folder.
                ----------------------------------------------


    6.6: Set location of views folder:
        * This is setting the views of our project to the folder we previously made for the MVC pattern.
        * Note: you could also do path.join(__dirname, '/views') depending on your preference.
                -----------------------------------------------
                    app.set("views", __dirname + "/views");             -- sets "views" to current directory and append to "/views" folder.
                -----------------------------------------------


    6.7: Create "layout" folder inside "views" folder:
        * This folder will hold the layouts for our app.
                -----------------------------------------------
                    views  >  layouts                                    -- "layouts" subfolder in views.
                -----------------------------------------------


    6.8: Create a "layout.ejs" file inside the new layouts subfolder:
        * This layout.ejs file is going to be the boilerplate HTML for every page in the application.
                ----------------------------------------------
                    views  >  layouts  >  layout.ejs                     -- "layout.ejs" for global HTML boilerplate.
                ----------------------------------------------
    

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Since I like to do things organically with application development, I thought it best to install ejs in full 
              in a later phase. In the case of this project, we want to use a template engine (ejs) and be able to have a 
              layout file for our HTML (express-ejs-layouts).   
            * Before you begin using ejs with your app, make sure you have the ejs language support installed in VSCode.
            * For more information on EJS, see my template engine study: https://github.com/john-azzaro/Study-Template-Engines
                      
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






Phase 6: Integrate routes with views.
=============================================================================================================
--  
=============================================================================================================
10-06 1


Resources
==========
https://www.npmjs.com/package/express-ejs-layouts  -- ejs layouts file
https://scotch.io/tutorials/use-ejs-to-template-your-node-application  -- ejs layouts outline