Process notes for Issue Index Application
==========================================




About Process Notes
===================
Process Notes is documentation of the procedure I take when creating my apps, in this case the "Issue Index Application". 
Though this might seem like a bit of extra work, documenting my creation of the app from start to finish has proven to be 
extremely valuable in bug hunting and refining my workflow for future use. I have tried to break down my process into "phases" 
with at least several steps to accomplish that phase before moving on. Each step documents what I do. At the end of the phase
I like to jot down special notes (if any) for future reference and comparison. I also have additional resources with links for 
solutions to issues I come across for reference.




Objective and User Story
=========================
The objective of this application is to provide an accessible "index of issues and solutions" for a given project (which could be anything). 
The user would visit the main page and be presented with recent additions, categories, and individual issues to browser. There would be search
functionality for categories and issues. The user would have the ability to add categories and issues and have the ability to edit or remove
categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource by nature.




Process Workflow Summary
========================

    Phase 1: Project Setup.
    Phase 2: Import libraries and configure app.
    Phase 3: Setup initial server.
    Phase 4: Setting up MVC router.



Phase 1: Project Setup
=========================================================================================
-- This phase is comprised of basic setup, installation of dependencies, development 
   environment setup, and essential files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1. Issue-Index-App                                     -- Create a folder to store you application.
        2. npm init                                            -- Create a package.json file to start the project off (you can use npm inti -y to skip the questions).

    // Install express:
        3. npm install express                                 -- Install express (note: you can also type "npm i" to install).

    // Add .gitignore file for node_modules:        
        4. .gitignore > node_modules                           -- Add .gitignore file to ignore node_modules folder that was just added when you installed express.

    // Install application dependencies:
        5. npm install ejs express-ejs-layouts                 -- Install any other dependencies (if you need to at the outset of the project like mongoose).
                                                                  In the case of this project, we want to use a template engine (ejs) and be able to have a layout file
                                                                  for our HTML (express-ehs-layouts).

        6. npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        7. "devStart": "nodemon server.js"                     -- Running this command makes starting your server a little more streamlined.
        8. "start": "node server.js"                           -- Running this command will start the server normally in a production environment.
        
    // Create initial application files:       
      8.1.   server.js                                       -- Creates a .js file for server code.
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * Submit everything AFTER you create the .gitignore file and add node_modules.
            * Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * You can have multiple custom scripts. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    




Phase 2: Import libraries and configure app:
=============================================================================================================
-- This phase involves the initial library importation and confugration.
=============================================================================================================

    2.1:  Import initial libraries:

            ---------------------------------------------------------
                const express = require('express');                       -- imports express from express library.
                const app = express();                                    -- get the app portion from the express librrary to instantiate the app.
                const expressLayouts = require('express-ejs-layouts');    -- import the express layouts package.
            ---------------------------------------------------------      


    2.2: Configure your app:
        * When you configure your app, you are setting the settings such as the behavior of the app (in the case of views and view engines), etc.
          You use the "app.set()" and assign a name and a value.

        * There are a two ways to do this, you can either use static files OR as what will be done for this project, 
          setting our "view engine" to ejs. You could use another view engine like pug but ejs seems to be more versatile.

            ---------------------------------------------------------
                app.set("view engine", "ejs");                             -- sets the view engine
            ---------------------------------------------------------
        
        * Then, set the location of your "views" folder.

            ---------------------------------------------------------
                app.set("views", __dirname + "/views");                    -- sets "views" to current directory and append to "/views" folder.
            ---------------------------------------------------------

        * Next, set your layout file.
         A layout file will allow use to reuse HTML like the header and the footer.

            ---------------------------------------------------------
                app.set("layout", "layouts/layout");                       -- sets layout file in layouts folder.
            ---------------------------------------------------------


    2.4: Add initial middleware:
        * Tell the application that we want to use "express layouts"...

            -------------------------------------------------
                app.use(expressLayouts);
            -------------------------------------------------

        * Additionally, we want to tell express where all our public files are going to be when requested by the client.
        
            -------------------------------------------------
                app.use(express.static('public'));
            -------------------------------------------------


    2.3: Create a "views" and "public" folders:
        * The "views" folder is going to be where all the different views of the files are going to go.
        * The "public" folder is going to be where all the public files like stylesheets, javascript, images, etc.
            --------------------
                views
                public
            --------------------

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * These are not the only libraries added nore the only middleware to be used. However, I find it easier to load the intial libraries 
              first and then add in libraries as you go along (i.e. mongoose, etc.) because then you can keep track of the process and make sure 
              you dont miss anything.
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    






Phase 3: Setup initial server:
=============================================================================================================
-- This phase will set-up the server to listen on a given port 
=============================================================================================================
    * So for the intial set-up of the server, you can initially setup a basic app.listen and the port number. However, if
      you want to run integration tests later, you will need to configure your server in a more complex way. Procedurally, 
      it makes the most sense when I get to this point to then add in the elements that will make this work now. 


    3.1: Create a (temporary) basic server to test the connection:
        * Note: It's a bit easier just to do the second method because integrated testing should be standard practice so this
                adds a bit of future proofing to the code. 
        ----------------------------------------------------------                     ----------------------------------------------------------
            app.listen(3000, function() {                                                 let server; 
                console.log('Your app is listening on port 3000');         or...          server = app.listen(3000, function() {   
            });                                                                               console.log(`Listening on port 3000...`);   
        ----------------------------------------------------------                        });
                                                                                       ----------------------------------------------------------
      
    3.2: Test your connection:
        * In gitbash, you will can run the server by running the custom script "devStart" with "npm run devStart".
        * Remember that using "devStart" will enable nodemon so your server will reset after each change made to the code.
        * If successful, you will see something like this:

            -----------------------------------------------------------------------
                $ npm run devStart

                > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                > nodemon server.js

                [nodemon] 2.0.2
                [nodemon] to restart at any time, enter `rs`
                [nodemon] watching dir(s): *.*
                [nodemon] watching extensions: js,mjs,json
                [nodemon] starting `node server.js`
                Your app is listening on port 3000
            -----------------------------------------------------------------------

    3.3: Test your application in browser:
        * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
          but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * If you want to get in the habit of creating a server and account for EVENTUAL test integration, creating the server the second way
              in step 2.2 is preferable. When the time comes, you would simply need to replace the port number (i.e. 3000) and the message when you
              integrate this into the runServer function.         
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 4: Setting up MVC router
=============================================================================================================
-- While smaller application will have routes clustered together in the server.js file, for larger 
   applications it can messy pretty quickly so we need to setup our MVC (Model View Contoller). 
-- Quick note about MVC: Model View Controller is a design pattern for our application. Currently, we have 
   View (i.e. "views" folder) and Controller (i.e. "routes" folder). We will also need a Model ("models" folder) 
   to house all our database models to complete the design pattern.
=============================================================================================================

    4. Create a "routes" folder:
        * In the router our routes (i.e. "controllers" but in node.js it is called "routes") will all 
          be kept and organized for use with server.js.
            -------------------------------
                routes
            -------------------------------
















Resources
==========
https://www.npmjs.com/package/express-ejs-layouts  -- ejs layouts file
https://scotch.io/tutorials/use-ejs-to-template-your-node-application  -- ejs layouts outline