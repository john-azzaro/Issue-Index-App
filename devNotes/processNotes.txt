Process notes for Issue Index Application
==========================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of my app development and the successive steps taken at each
milestone of application development. Groups of related steps are combined into "phase" modules so that they can be reorganized and refined 
in post-review. This has proven to be EXTREMELY helpful in learning (i.e. Feynman technique (https://fs.blog/2012/04/feynman-technique/)) 
and refining workflow so I can improve my process in future projects. It also has come in handy for some tricky bug fixes not only for
past projects, but this one as well so I would urge you to consider at least doing a rough summary for your own benefit.





5Q's, Objective and User Story
=========================
[What is the Problem?]: 
You're working on a project and you come across a particular "issue". You do some research, ask colleagues, trial and error and you 
managae to find a solution. Now what if someone else has the same problem? All the work you put into finding the solution on the issue could
end up going to waste.

[Why hasnt the problem been solved?]:
Although glossaries and wikis exist, they often more complicated than what is needed, and if they cost money to run. This is a simple and
straight forward "issue index" with categories and issues filed to those categories. 

[What is Possible?]:
Imagine being able to create a project issue index for free and the latitude to create categories and issues for your project that will Finally
your team in on small issues that get resolved.

[What is different now?]:
Now you can simply create a open source issue index page and post your issues to a growing number of categories.

[What should you do now?]:
Use issue index. with issue index, the user would visit the main page and be presented with recent additions, categories, and individual issues 
to browser. There would be search functionality for categories and issues. The user would have the ability to add categories and issues and have 
the ability to edit or remove categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource 
by nature.






Initial Plan for the App
========================
1. Do basic wireframe for intitial design.
2. Setup the initial conventional structure of the project (basic first, reiterate second, refactor third).
3. Setup database (will use with this project).
4. Add highest level feature "Categories", which will pertain to the related "issues".  
4. Add next level feature "issues", which will then file into categories.  







Process Workflow Summary:
=========================
                                                                                        _____________________________________________                
    Phase 1: Project Setup:                                                                        Project Setup (Phases 1-8)
        1. Project Setup.                                  
        2. Install Express.                                                  
        3. Add .gitignore.                                                               
        4. Add custom start scripts.
        5. Add server.js.

    Phase 2: Create express app:
        1. Setup express.
 
    Phase 3: Setup MVC and public files:
        1. Create MVC folder.
        2. Create public folder.
   
    Phase 4: Setup server:
        1. Create server.
        2. Run server.
        3. Test server in browser.

    Phase 5: Create a Router:
        1. Create "route" file in router folder.
        2. Setup router file.
        3. Hook-up "index.js" to "server.js".
        4. Test router.
        
    Phase 6: Configure EJS:
        1. Install EJS.
        2. Set EJS as the view engine.
        3. Load and use express-ejs-layouts.
   
    Phase 7: Setup views and layouts:
        1. Set views.
        2. Set layouts.

    Phase 8: Integrate routes with views:
        1. Create layout "view" file.
        2. Create HTML template for primary layout view.
        3. Insert EJS element for future page content.
        4. Create an index.js controller in "views"
        5. Integrate the route with the view.
        6. Test the integration.
                                                                                        _________________________________________________
    Phase 9: Integrate Mongoose:                                                                     Setup database (Phase 9)
        1. Setup mongoose on server.js.                                          
        2. Setting up connection to database with .env file.                     
                                                                                        __________________________________________________                                              
    Phase 10: Add "category" controllers and views:                                          Add Category functionality (Phase 10-16)
        1. Create an "category" Router.
        2. Setup category routes.
        3. Create views for category routes.
        4. Hook up "categoryRouter" to server.js.
        5. Test categoryRouter.

    Phase 11: Create and include partials in layout:
        1. Create "partials" folder in views.
        2. Create initial partial files (i.e input field).
        3. Include partial files in layout.

    Phase 12: Create Category model:
        1. Create models folder.
        2. Create a "category.js" file in "models".
        3. Load mongoose.
        4. Create a schema for "categorySchema".
        6. Create a model for "Category".
        7. Export the Category model.
        8. Import Category model to "categories.js".
        9. Use the model in your route.

    Phase 13: Create form and input partial for Category (for nav):
        1. Add form to new.ejs.
        2. Create partial file for form field.
        3. Create a label form field.
        4. Import the form partial to category.js.

    Phase 14: Configure "create category" route:
        1. Install and configure body-parser via npm.
        2. Test "Create Category Route".

    Phase 15: Build Create Category Route.
        1. Configure "Create Category Route".
        2. Create error message partial.
        3. Add async to the "Create Category Route"...

    Phase 16: Display All categories feature to app.
        1. Add async to All Categories route.
        2. Create view for all categories.
        3. Implement search feature for categories.
        4. In index.js, add searchOptions as a value to the form.
                                                                                         _________________________________________________
    Phase 17: Add "Issue" controller and views.                                                 Add Issue functionality (Phase 17-)
        1. Create a "issues.js" router.
        2. Create an "issue" model.
        3. Hook-up "issueRouter" to server.js.
        4. Add Issue links to header.js
        5. Test issueRouter.

    Phase 18: Add "new issues" to views.        
        1. Create an "issues" file.
        2. Create a "new.ejs" file for new issues.
        3. Add form field partial for issue _form_fields.ejs.
        4. In issues router, add new issue route.
        5. Complete form field partial for add issue.
        6. 
        7. 








Phase 1: Project Setup
=========================================================================================
-- Setting up your project lays the foundation for the rest fo the project. The initial 
   steps involve installing npm, dependencies, development environment setup, and 
   essential files like server.js, .gitignore, and .env.
=========================================================================================

/// Project Setup:                           
        1.1:  Issue-Index-App                                     -- Create a folder to store you application.
        1.2:  npm init                                            -- Create a package.json file to start the project off.

/// Install express:
        1.3:  npm install express                                 -- Install express.
        1.4:  .gitignore > node_modules                           -- Tell git to ignore node_modules folder.

/// Install developer environment:                
        1.5:  npm install --save-dev dotenv nodemon               -- Install development enviroment.

/// Create custom "devStart" script in package.json:     
        1.6:  "devStart": "nodemon server.js"                     -- Run development environment (npm run devStart).
        1.7:  "start": "node server.js"                           -- Run server normally in a production environment (npm run start).
        
/// Create initial application files:       
        1.8:   server.js                                          -- Create main server file.
    
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * 1.2 -- Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * 1.4 -- Submit everything AFTER you create the .gitignore file and add node_modules.
            * 1.6 -- Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * Note -- You can have multiple custom scripts. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    





Phase 2: Create express app
=============================================================================================================
-- Create express application, import initial "set" configuration settings and middlewares.
=============================================================================================================

/// Setup express application...
        ==================================================================
        * When you import libraries, you are essentially importing the 
          packages you have installed via npm. To use exprees, you simply 
          need to load it and instantiate it.
        ==================================================================
        
    2.1: Setup express:
        ---------------------------------------------------------
                const express = require('express');                     -- Imports express from express library.
                const app = express();                                  -- Get the app portion from the express librrary to instantiate the app.
        ---------------------------------------------------------      


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * 2.1 -- When you import libraries, you are essentially importing the packages you have installed via npm.
            * 2.1 -- These are not the only libraries added nore the only middleware to be used. However, I find it easier to load the intial 
                     libraries first and then add in libraries as you go along (i.e. mongoose, etc.) because then you can keep track of the process 
                     and make sure you dont miss anything.          

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    





Phase 3: Setup MVC and public files
==========================================================================================================
-- For larger applications, use MVC (Model View Contoller) file structure for efficientcy and consistency.
==========================================================================================================

/// Setup MVC file structure... 
        ==============================================================================
        *  Model View Controller is a design pattern for our application. Currently, 
           we have View (i.e. "views" folder) and Controller (i.e. "routes" folder). 
           You'll also need a Model ("models" folder) eventually to house all our 
           database models to complete the design pattern.
        ==============================================================================
        
        3.1: Create MVC folders:
                --------------------
                    models            -  (M)odels
                    views             -- (V)iews
                    routes            -- (C)ontroller 
                --------------------


/// Setup a "public" file...
        =================================================================================
        * The "public" folder is used to store and serve static files, like stylesheets, 
          javascript, images, etc. Anything initially requested clientside goes here.
        =================================================================================
                
        3.2 Create and use public folder:          
                ---------------------------------------------------------
                        app.use(express.static('public'));                      -- Tell express all public files kept in public folder.
                ---------------------------------------------------------    
                --------------------------------------------------------
                        public                                                  -- Create folder for storing static assets.
                ---------------------------------------------------------

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:             
          * 3.1 -- The "models" folder will contain mongoose schemas and models.
          * 3.1 -- The "views" folder will contain different views of the files (i.e. ejs files, etc).
          * 3.1 -- The "routes" folder will contain controllers (i.e. CRUD routes) 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  





Phase 4: Setup server
=============================================================================================================
-- Create a server to listen on a given port and test the connection to ensure working functionality.
=============================================================================================================

/// Create server...
        ==================================================================
        * Although there are different ways to setup a server, the method
          below is best for eventual integration testing.
        ==================================================================
        
        4.1: Create server:
            ----------------------------------------------------------
                    let server; 
                    server = app.listen(3000, function() {   
                        console.log(`Listening on port 3000...`);   
                    });
            ----------------------------------------------------------
      

/// Test your server...
        ======================================================
        * Use "npm run devStart" for developer environment.
        * Use "npm run start" for production environment.
        ======================================================
        
        4.2: Run your application:
            -----------------------------------------------------------------------
                    $ npm run devStart

                    > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                    > nodemon server.js

                    [nodemon] 2.0.2
                    [nodemon] to restart at any time, enter `rs`
                    [nodemon] watching dir(s): *.*
                    [nodemon] watching extensions: js,mjs,json
                    [nodemon] starting `node server.js`
                    Your app is listening on port 3000
            -----------------------------------------------------------------------


        4.3: Test your application in browser:
            * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
              but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:       
            * 4.1 -- So for the intial set-up of the server, you can initially setup a basic app.listen and the port number. However, if
                     you want to run integration tests later, you will need to configure your server in a more complex way. Procedurally, 
                     it makes the most sense when I get to this point to then add in the elements that will make this work now. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 5: Create a Router
=============================================================================================================
-- Because this application is going to larger, we want to create a "Router" that modularizes all the routes
   that we'll have for the application and keep our server.js file clean.
=============================================================================================================

/// Create a route file in router folder...
        ================================================================================
        * Earlier we created our MVC file structure with a "routes" folder. This routes
          folder is going to hold all the routes we wish to modularize to help keep our
          server.js file clean. To start off, we'll create an index.js file to handle
          the catch-alls... that is, everything else unspecified for the app.
        ================================================================================
        
        5.1: Create an "index.js" route inside the "routes" folder:
            -----------------------------------------------------------------
                    routes  >  index.js                                             -- "index.js" route created for catch-alls in "routes" folder.
            -----------------------------------------------------------------
        

/// Setup router file...
        ================================================================================
        * For each router file you create, you need to load express, the router portion
          of express, and export the module (i.e. this "index.js" file) to server.js.
        ================================================================================
        
        5.2: In index.js, setup the router by loading express, router, and export:
            -----------------------------------------------------------------
                    const express = require('express');                             -- Load express.
                    const router = express.Router();                                -- Load router portion of express.

                    ...
                    ...
                    ...

                    modules.exports = router;                                       -- Export the module "router" (which will hook up to "router" in server.js).
            -----------------------------------------------------------------

        5.3: Create a test route to the root of the application (i.e. '/'):
            -----------------------------------------------------------------
                    router.get('/', function(req, res) {                            -- This route should return "This is a test" in your localhost root request.
                        res.send('This is a test');
                    });
            -----------------------------------------------------------------


/// Hook-up "index.js" to "server.js"...
        =============================================================================
        * Essentially, once you have the router setup correctly, you can link it to 
          the server.js file so that you have full use of the seperate route module.
        =============================================================================
        
        5.4: Load "index.js" to "server.js":
            -----------------------------------------------------------------
                    const indexRouter = require("./routes/index");                  -- Hooks up application to the index.js file in the routes folder.
            -----------------------------------------------------------------

        5.5: Add indexRouter middleware so that the application can use it:
            -----------------------------------------------------------------
                    app.use("/", indexRouter);                                      -- Middleware says that for root request, use indexRouter.
            -----------------------------------------------------------------


/// Test router...
        ==================================================
        * To test, go to localhost:3000 in your browser. 
        ==================================================
                   
        5.6: Test the route.    
            -----------------------------------------------------------------
                    localhost:3000   >   This is a test
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * 5.1 -- Use "index.js" in "routes" as a catch-all for everything that doesnt have a resource or a model.
            * 5.1 -- Create a Router with a routes folder and initial route file index.js to better organize 
                     the routes we have instead of collecting everything in the server.js folder. 
            * 5.4 -- When assigning the name as "indexRouter" and as a value pass in the relative path (i.e. "./routes/index"), note that "./" is 
                     relative to where the route is. Also notice when you put in the initial relative path (./), intellesense will show you the folders 
                     and the file.
            * Note -- For more information on express router, see my study that outlines a basic setup: https://github.com/john-azzaro/Study-Express-Router
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 6: Configure EJS
=============================================================================================================
-- For this application, we're going to be using a template engine called ejs that will allow us to reuse
   our HTML over many pages without having to repeat our code. In order to use EJS, we need to configure
   the app to use EJS in server.js.
=============================================================================================================

/// Install EJS dependency via npm...
        =====================================================================
        * Installing ejs and express-ejs-layouts as well as setting the view 
          engine to ejs will allow you to use ejs in your application.
        =====================================================================

        6.1: Install ejs and express-js-layouts with npm:   
            -----------------------------------------------------------------
                    npm install ejs express-ejs-layouts                             -- Npm install of "ejs" and "express-ejs-layouts"                                                                
            -----------------------------------------------------------------
        

/// Set EJS as the view engine...
        ========================================================================
        * Layouts enable us to dynamically fix content or elements to a page 
          in such a way that even if a different page is requested, the content 
          remains but the page is successfully accessed.
        ========================================================================
        
        6.2: Set view engine to ejs: 
            -----------------------------------------------------------------
                    app.set("view engine", "ejs");                                  -- Set the view engine to ejs.
            -----------------------------------------------------------------


/// Load and use express-ejs-layouts...
        ========================================================================
        * expressLayouts is going to allow us to create a layout file for all
          the HTML in the app.
        ========================================================================
        
        6.3: Import expressLayouts:
            -----------------------------------------------------------------
                    const expressLayouts = require('express-ejs-layouts');          -- Import the express layouts package.
            -----------------------------------------------------------------  

        6.4: Use express layouts (middleware):
            -----------------------------------------------------------------
                    app.use(expressLayouts);                                        -- Tell the application that we want to use "express layouts"
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note -- When you configure your app, you are setting the settings such as the behavior of the app (in 
                      the case of views and view engines), etc. You use the "app.set()" and assign a name and a value.
            * Note -- Since I like to do things organically with application development, I thought it best to install ejs in full 
                      in a later phase. In the case of this project, we want to use a template engine (ejs) and be able to have a 
                      layout file for our HTML (express-ejs-layouts).   
            * Note -- Before you begin using ejs with your app, make sure you have the ejs language support installed in VSCode.
            * Note -- For more information on EJS, see my template engine study: https://github.com/john-azzaro/Study-Template-Engines   

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 7: Setup views and layouts.
================================================================================================================
--  Setting up views and layouts by hooking up "views" folder and setting layouts/layout as the central layout.
================================================================================================================

/// Set views...
        ============================================================================
        * Since we've already created the "views" folder as part of out MVC 
          design pattern, what want to hook these folders and files up so when
          we start using ejs in the next phase, everything will function correctly.
        ============================================================================ 

        7.1: Set location of views folder:       
            -----------------------------------------------------------------
                app.set("views", __dirname + "/views");                         -- Sets views to draw from "views" folder (which we made for our MVC pattern). 
            -----------------------------------------------------------------  
    

/// Set layouts...
        ==============================================================================
        * And to set layouts, we set where the layouts file is going to be. The idea
          behind the layouts file is that all the HTML we create for the app will go 
          in the layouts file so we dont have to duplicate the same HTML over and over.
        ==============================================================================

        7.2: Set "layouts" file in "views":
            -----------------------------------------------------------------
                        app.set("layout", "layouts/layout");                            -- Sets layout file so you can reuse HTML like the header and the footer.
            -----------------------------------------------------------------

        7.3: Create "layout" folder inside "views" folder:
            * This folder will hold the layouts for our app.
            -----------------------------------------------------------------
                        views  >  layouts                                               -- "layouts" subfolder in views to hold the layouts for our app.
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note -- Since I like to do things organically with application development, I thought it best to install ejs in full 
                      in a later phase. In the case of this project, we want to use a template engine (ejs) and be able to have a 
                      layout file for our HTML (express-ejs-layouts).   
            * Note -- Before you begin using ejs with your app, make sure you have the ejs language support installed in VSCode.
            * Note -- For more information on EJS, see my template engine study: https://github.com/john-azzaro/Study-Template-Engines
            * 7.1 --  You could also do path.join(__dirname, '/views') depending on your preference.    

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 8: Integrate routes with views.
=============================================================================================================
--  Now that we've created a seperate "routes" module (since this will be a large app necessitating the 
    relocation of routes from server.js to "routes" folder) and setup the app to use EJS, we now need to
    create reusable blocks of HTML code so that dont have to create duplicate code for each one of our pages.
=============================================================================================================

// Create layout "view" file...
        ==============================================================================
        * In the case of "layout.ejs", we are creating a primary "view" which is the
          primary HTML document that our entire application will use. This comes in 
          handy because we dont have to repeat the code over and over again, we will
          just need to insert the different pages inside this layout view.
        ==============================================================================

        8.1: Create a "layout.ejs" file inside the new layouts subfolder:
            -----------------------------------------------------------------
                    views  >  layouts  >  layout.ejs                             -- "layout.ejs" for global boilerplate HTML for every page in the application.
            -----------------------------------------------------------------


// Create HTML template for primary layout view...
        ========================================================================
        * The "layout.ejs" document will be the central HTML document that will 
          wrap around all of the pages we create for the app, allowing us to have 
          one file for multiple pages and help with edits, bugs, etc. 
        ========================================================================

        8.2: In layout.ejs, insert your HTML template:
        ------------------------------------------------------------------
                <!DOCTYPE html>                                                 -- Boilerplate HTML that will wrap around every page in the application.
                <html lang="en">
                <head>
                    ...meta...
                </head>
                <body>
                </body>
                </html>
        ------------------------------------------------------------------
    

// Insert EJS element for future page content...
        =========================================================================
        * 
        =========================================================================
        
        8.3: Insert EJS "body "element for page specific content:
            * Inside the body, using <%-  and %> tags will utilize ejs.
            ------------------------------------------------------------------
                    <!DOCTYPE html>                                            
                    <html lang="en">
                    <head>
                        ...meta...
                    </head>
                    <body>

                        Before                                                     -- "Before" added for testing.
                        <br>

                        <%- body %>                                                -- All page specific content will be included "body" element.
                        
                        <br>
                        After                                                      -- "After" added for testing.

                    </body>
                    </html>
            ------------------------------------------------------------------    


// Create an index.js controller in "views"...
        ==================================================================================
        * This step is essentially to test that the views are integrated with the router.
        ==================================================================================
        
        8.4: Create a "index.ejs" file in "views" and test.
            ------------------------------------------------------------------
                    views  >  index.ejs                                            --"index.js" inside the "view" folder (note: add "middle" text to test).
            ------------------------------------------------------------------ 


// Integrate the route with the view...
        ====================================================================================
        * Finally, this is the point where you integrate the route (in "index.js") with the
          view (in index.ejs). 
        ====================================================================================
        
        8.5: Replace "send" with "render" in index.ejs route and pass in the view (i.e. index):
            
            ------------------------------------------------------------------
                    router.get('/', function(req, res) {
                        res.render('index');                                        -- "res.send" changed to "res.render" with the name of the view.
                    });
            ------------------------------------------------------------------


// Test the integration...
        ===============================================================================
        * When you test the connection, you will see whether or not the routes
          and views have been successfully integrated.
        ===============================================================================
    
        7.8: Test in localhost:3000
            ------------------------------------------------------------------
                    Before                                                          -- "Before" is in layout.ejs view.
                    Middle                                                          -- "Middle" is in index.ejs view.
                    After                                                           -- "After" is in layout.ejs view.
            ------------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * 8.1 -- The HTML boilerplate is not ejs specific... this is just a standard HTML template that will be shows for every page in the app.
                     In other words, we only have to do this template ONCE and reuse it for each page in our application.
            * 8.2 -- To insert the page specific, we simply need to insert an ejs element and assign it the name body: <%- body %>.
                      
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 9: Integrate Mongoose
=========================================================================================================
    * Because we want to store the information in a database (e.g. mongoDb) instead of keeping the database
      in local storage where it will be lost, we need to utilize mongoose, which will provide a modeling 
      environment for our data and enforce structure (models) and maintain flexibility.
=========================================================================================================

// Setup mongoose on server.js...
        ===================================================================================================
        * Installing mongoose here instead of initially in the project setup seems better so that you make
          sure you are following a topic-specific procedure.
        ===================================================================================================

        9.1: Install mongoose dependency via npm:
            -----------------------------------------------------
                    npm install mongoose
            -----------------------------------------------------

        9.2: Load Mongoose in server.js:
            -----------------------------------------------------
                    const mongoose = require('mongoose');             -- added mongoose library to the imports.
            -----------------------------------------------------

        9.3: Configure mongoose to use ES6 promises:
            -----------------------------------------------------
                    mongoose.Promise = global.Promise;                -- makes sure mongoose can use ES6 promises.
            -----------------------------------------------------
        

// Setting up connection to database with .env file...
        =======================================================================================================
        * There are a few methods I know for setting up connection to a database. The first via dotenv is a more 
          simplistic connection but it will not handle integrated testing easily. The second via config file will
          handle integrated testing but it is a bit more involved, so choose which one fits your project. For this 
          project I'll do both so you can choose what suits you.
        =======================================================================================================

        9.4: Connect mongoose:
            -----------------------------------------------------------------
                    mongoose.connect(process.env.DATABASE_URL, {                 -- mongoose connects to URL stipulated in the .env file. 
                        useNewUrlParser: true,  useUnifiedTopology: true         -- use new url parsser and unified topology.
                    });
            -----------------------------------------------------------------

        9.5: Determine if we are connected to database:
            ----------------------------------------------------------
                    const db = mongoose.connection;                               -- Access the connection
                    db.on('error', function(error) {                              -- If there is an error connecting to db, return error.
                    console.error(error) 
                    });
                    db.once('open', function() {                                  -- If connection is successful, log success message in the console.
                    console.log('Connected to mongoose...');
                    });
            ----------------------------------------------------------
        
        9.6: Install dotenv via npm to development environment:
            ----------------------------------------------------------
                    npm install --save-devdotenv                                  -- library allows you to load environment variable into the application.
            ----------------------------------------------------------

        9.7: Create a .env file:
            ----------------------------------------------------------
                    .env                                                          -- the ".env" file will house all the different variables.
            ----------------------------------------------------------

        9.8: Create DATABASE_URL in .env:
            ----------------------------------------------------------
                    DATABASE_URL=mongodb://localhost/issueindex                   -- The variable "DATABASE_URL" will use mongodb, local host, and the database name "issueindex"
            ----------------------------------------------------------

        9.9: In server.js, check to see if you are in the production environment:
            ----------------------------------------------------------
                    if (process.env.NODE_ENV !== 'production') {                 -- if process.env.NODE_ENV is NOT equal to production, load dotenv
                       require('dotenv').config();    
                    }
            ----------------------------------------------------------


// Create config.js file for database and ports...
        ==================================================================================================
        * To be added later.
        ==================================================================================================


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note -- From my experience, there are a few ways to setup mongoose for the app. The first is using a .env file and the second is 
                      with a config file. Additionaly, if you want to have integrated testing, youll need to incorporate runserver and endserver 
                      functions to the server process.
                      
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






Phase 10: Add "catagory" controlles and views.
==========================================================================================================
* One of the key features of this app is the categories that we can file our issues to. I found it best to 
  start off with the higher level routes first (i.e. categories) and then get into the granular parts of
  each category (i.e. issues). As part of the categories features, we want to create, search, and view the 
  categories in a new router.
==========================================================================================================

// Create a "category" Router...
        ======================================================================
        * To create a new controller in our routes folder, you basically have
          repeat the same process we did for index.js in creating a router. If
          just do a copy/paste because the "all" authors route is almost exactly
          the same as what we already have in the index.js route. Saves some time.
        ======================================================================
        
        10.1: Create an "category.js" in "routes":
             ----------------------------------------------------------------
                     category.js                                                      -- new router created in the routes file.
             ----------------------------------------------------------------

        10.2: Setup a router for "category.js":
             ----------------------------------------------------------------
                     //Imports
                     const express = require('express');                               -- Import express.
                     const router = express.Router();                                  -- Load router portion of express.

                     // Routes

                     //Export
                     module.exports = router;                                          -- Export the module "router" (which will hook up to "router" in server.js).
             ----------------------------------------------------------------

// Setup category routes...
        ======================================================================
        * This step will cover all the routes we'll need for the categories.
          For each category route we want to create, we'll want to render the
          layout in a "categories" folder. You can see here that for each new
          route class, you'll want to have a seperate folder for organizational
          purposes.
        ======================================================================
        
        10.3: Create "all categories" route:
             ----------------------------------------------------------------
                     // Routes
                     router.get('/', function(req, res) {                              -- get all categories at the root endpoint.
                        res.render('categories/index');
                     });
             ----------------------------------------------------------------

        10.4: Create a new "category" page route:
             ----------------------------------------------------------------
                     router.get('/new', function(req, res) {
                        res.render('categories/new');                                   -- this will DISPLAY the form to create the new category.
                     });   
             ----------------------------------------------------------------

        10.5: Create a new "Category":             
             ----------------------------------------------------------------
                     router.post('/', function(req, res) {
                         res.send('Create');                                           -- this will POST (i.e. send) to the collection to create a new category.
                     });
             ----------------------------------------------------------------


// Create views for category routes...
        ======================================================================
        * With the routes done, we need to create the views for the category 
          routes so that we have something to render when the client requests
          the given url. Note here that we're going to create 2 ejs files for 
          our 3 routes. Why? Because the "create" a new category does NOT render 
          anything to the app.
        ======================================================================

        10.6: In views, create files for all categories and new category page with test text:
             -----------------------------------------------------------------
                      index.js       >  "All categories"                               -- File will render the view for ALL categories.
                      new.ejs        >  "New category"                                 -- File will render the view for new category creation.
             -----------------------------------------------------------------


// Hook up "categoryRouter" to server.js...
        ======================================================================
        * Hook up the categories router to server.js.
        ======================================================================

        10.7: In server.js, import "categoryRouter":
             -----------------------------------------------------------------------
                      const categoryRouter = require('./routes/categories/');             -- Router hookedup between router > categories and server.js.
             -----------------------------------------------------------------------

        10.8: Use categoryRouter in the app:
             -----------------------------------------------------------------------
                      app.use('/categories', categoryRouter);                             -- every route in "categoryRouter" is going to be prepended with "categories"
             -----------------------------------------------------------------------

// Test categoryRouter...
        ============================================================================
        * When you test the router connection, you should see that when you go
          to the localhost:3000/categories, the "middle" part holds your categories.
        ============================================================================

        10.9: Test route at localhost:3000/categories:
             -----------------------------------------------------------------------
                     Beginning                Beginning            
                     All categories           New Category
                     After                    After
             -----------------------------------------------------------------------





Phase 11: Create and include partials in layout
========================================================================================
* Partials contain all the template files that are NOT connected to routes such as 
  headers, footers, etc. The awesome thing about EJS is that you can utilize your ejs 
  files as smaller, more versatile modules. Ive also found that using partials is really
  handy if you have a more fluid design sense and evolve the UI/UX oduring development.
* Note that when you create partial files, you want to use as a naming convention 
  underscores (i.e. _) to show that it is a partial file and not a full file being 
  rendered from the server.   
=========================================================================================

// Create "partials" folder in views...
        =============================================================================
        * First thing you need to do is create a partials folder to store all your 
          partial ejs templates.
        =============================================================================

        11.1: Create a "partial" file in "views":
             ----------------------------------------------------------------------
                     views  >  partials                                                   -- "partials" will contain all the template files NOT associated with routes.
             ----------------------------------------------------------------------


// Create initial partial files...
        =============================================================================
        * Initially, we'll want to create a header.js in our partials folder so we 
          avoid manually inputting routes each and every time. Again, the design of
          the header and other partials is not vitally important is you have an organic
          design process, this is just extremely convienient for development.
        =============================================================================

        11.2: Create a "header.js" file in the partials folder:
             ----------------------------------------------------------------------
                     partials  >   header.ejs                                             -- "header.ejs" will be the initial primary template for the header of the application.
             ----------------------------------------------------------------------

        11.3: In header.js, create a basic header with nav:
             ----------------------------------------------------------------------
                     <header>
                        <nav>
                           <a href="/">IssueIndex</a>                                      -- anchor tag that directs to home.
                           <ul>
                              <li><a href="/categories">Categories</a></li>                -- anchor tag that directs to the categories page.
                              <li><a href="/categories/new">Add Category</a></li>          -- anchor tag that directs to the Add Category page.
                           </ul>
                        </nav>
                      </header>
             ----------------------------------------------------------------------


// Include partial files in layout...
        =============================================================================
        * And at last, you take the header partial you just created and "include" it
          in your main layouts.ejs HTML file. To do this, you find a spot in your HTML
          you want the partial to be and simply call include inside an ejs tag and
          pass the route to the partial file. Note that because the partials file is 
          nested inside views, you need to add two dots before partials/header.ejs
        =============================================================================
        
        11.4: "Include" the partial module in the layouts.ejs file:
             ----------------------------------------------------------------------
                     <%- include('../partials/header.ejs') %>                            -- "include" the header.ejs partial file in layouts.ejs.
                     <%- body %>
             ----------------------------------------------------------------------




Phase 12: Create Category model
====================================================================================
* To start creating true functionality with our application, we first need to create
  models and schemas that mongoose will use. Check out my outline on mongoose models 
  and schemas here: https://github.com/john-azzaro/Study-Mongoose-Schemas . Also, check 
  out https://github.com/john-azzaro/Study-Mongoose-Configuration-and-Data-Modeling 
  for more information on mongoose foundational information.
====================================================================================

// Create models folder...
        ============================================================================
        * Creating a "models" folder is part of the overall MVC file structure where
          for items saved to the mongodb database.
        ============================================================================

        12.1: Create "models" folder:
             ------------------------------------------------------------------------
                        models                                                                  -- the M in MVC!
             ------------------------------------------------------------------------


// Create a "category.js" file in "models"...
        =============================================================================
        * This model file will conatin the schemas, models, instance methods, embedded
          models, etc. for "category".
        =============================================================================
        
        12.2: Create "category.js" file:
             ------------------------------------------------------------------------
                        category.js                                                              -- model and schema for categories.
             ------------------------------------------------------------------------


// Load mongoose...
        =============================================================================
        * Our model and schema will utilize mongoose to interact with mongodb database.
        =============================================================================

        12.3: Load mongoose:
             ------------------------------------------------------------------------
                        const mongoose = require('mongoose');                                    -- use mongoose for category.js
             ------------------------------------------------------------------------ 

        
// Create a schema for "categorySchema"...
        ==============================================================================
        * A schema will define the shape of the documents we have within a collection
          in mongodb. At this point, we are going to create a category schema.
        ==============================================================================

        12.4: Create a category schema:
              ------------------------------------------------------------------------
                        const categorySchema = new mongoose.Schema({                             -- new schema named "categorySchema" with...
                            name: {                                                              -- The Category needs a name...
                              type: String,                                                      -- which is a string...
                              required: true,                                                    -- and is required.
                            }
                        });
              ------------------------------------------------------------------------


// Create a model for "Category"...
        ===============================================================================
        * Now that you have a schema, you need to essentially wrap the schema in a model.
          Remember that a schema defines the structure of a document like default values,
          etc., but the model provides the interface to the database for creating, 
          querying, updating, and deleting.  
        ===============================================================================

        12.5: Create a model for the categorySchema:
                -----------------------------------------------------------------------
                        const Category = mongoose.model('Category', categorySchema);             -- Category is categorySchema.
                -----------------------------------------------------------------------


// Export the Category model...
        ================================================================================
        * In order to use the model elsewhere in your code, you need to export it using
          module.exports. A good way to do this is via destructuring syntax. Once this is
          done we can then import the model to create new categories.
        ================================================================================

        12.6: Export the model:
                ------------------------------------------------------------------------
                        module.exports = { Category };                                            -- export Category model.
                ------------------------------------------------------------------------


// Import Category model to "categories.js"...
        =================================================================================
        * Back in routes > categories.js, we need to import the model to use. This will
          give you access to the Category model
        =================================================================================

        12.7: Import model to "categories.js":
                -------------------------------------------------------------------------
                        const { Category } = require('../models/category');                       -- Imported "Category" from models/category (note ../ for model folder nesting).
                -------------------------------------------------------------------------


// Use the model in your route...
        =================================================================================
        * Now that you successfully imported the model to your routes > categories.js file, 
          you can freely use it in your routes. In the case below, we can now create a new
          category at the endpoint. Note that this does NOT save anything to the database
        =================================================================================

        12.8: In the new Category route, add your model:
                -------------------------------------------------------------------------
                        router.get('/new', function(req, res) {
                           res.render('categories/new', { category: new Category() });            -- The "category" variable will be passed to the ejs file
                        });
                -------------------------------------------------------------------------
                
                



Phase 13: Create form and input partial for Category
========================================================================================
* Now that we have the model and route done, we need to create a form so that we can 
  give the user the ability to add a catagory.
========================================================================================

// Add form to new.ejs...
        ================================================================================
        * The form uses a basic HTML form layout with a button for submission and an 
          anchor link for canceling the submission.
        ================================================================================

        13.1: Create New Category form:
                ------------------------------------------------------------------------
                        <h2>New Category</h2>
                        <form action="/categories" method="POST">                                 -- Form with action is the url the form goes to.
                        // Input goes here.
                        <a href="/categories">Cancel</a>                                          -- Anchor tag (used to link) Cancel sends us back to categories.
                        <button type="submit">Create</button>                                     -- Button (used to interact with form) submit the category submission.
                        </form>

                ------------------------------------------------------------------------


// Create partial file for form field...
        ================================================================================
        * You could put in an input here in the form, but since the form will be shared 
          with edit as well, so instead of duplicating the code we can just create a partial
          and use it in both places! This is how the server gets the data from the object,
          what the "name" is is what will be the input to the server.  when we get this back, 
          all we need to do is call body.name to get the input value.
        ================================================================================

        13.2: Create a partial file for form fields:
                ------------------------------------------------------------------------
                        _form_fields.ejs                                                          -- Form fields file (using underscores).
                ------------------------------------------------------------------------


// Create a label form field...
        ================================================================================
        * This is how the server gets the data from the object, what the "name" is is 
          what will be the input to the server.  when we get this back, all we need to 
          do is call body.name to get the input value. Note that for the ejs tag, the "="
          in <%= category.name %> means that what follow the "=" will be output as html
          to the page.
        ================================================================================

        13.3: Add your form in _form_fields.ejs:
                -------------------------------------------------------------------------
                        <label>Name</label>
                        <input type="text" name="name" value="<%= category.name %>" >              -- Form partial with category name. 
                -------------------------------------------------------------------------


// Import the form partial to category.js...
        =================================================================================
        * Once you have the partial completed, you can import it to the category.js file.
        =================================================================================

        13.4: Import form partial:
                -------------------------------------------------------------------------
                        <h2>New Category</h2>
                        <form action="/categories" method="POST">
                           <%- include('_form_fields') %>                                          -- Include the form partial in the new Category page.
                           <a href="/categories">Cancel</a>
                           <button type="submit">Create</button>
                        </form>
                -------------------------------------------------------------------------





Phase 14: Configure and test "create category" route...
        =================================================================================
        * With the input field partial completed, you can now setup the create category 
          route to accept and parse text as json or urls for the form.
        =================================================================================

// Install and configure body-parser via npm...
        =================================================================================
        * So body-parser is a middleware that extracts the entire body portion of an 
          incoming request and exposes it on req.body which is very easy to interface 
          with.
        =================================================================================

        14.1: Install body-parser via npm:
                -------------------------------------------------------------------------
                        npm install body-parser                                                   
                -------------------------------------------------------------------------

        14.2: Configure body-parser in server.js:
                -------------------------------------------------------------------------
                        const bodyParser = require('body-parser');                                  -- Load body-parser to server.js
                -------------------------------------------------------------------------

        14.3: Tell express how to use body-parser via middleware:
                -----------------------------------------------------------------------------
                        app.use(bodyParser.json());                                                 -- Bodyparser middleware that can parse text as JSON and exposes the resulting object on req.body.
                        app.use(bodyParser.urlencoded( { limit: '10mb', extended: false}));         -- Bodyparser middleware that can parse text as url for form (& limited to 10mb for uploading files to server)
                -----------------------------------------------------------------------------


// Test "Create Category Route"...
        ===================================================================================
        * Now that you can text as json via body-parser, you can change the create category
          route to parse the form text in a simple and straight forward way. Once this is 
          done, you can use the input name to create a new category and add it to the 
          database. When you test, you should be able to enter a string in the input, submit 
          it, and a page with the string you entered will appear.
        ===================================================================================
        
        14.4: Amend "create category route":
                ---------------------------------------------------------------------------
                        // Create Category Route
                        router.post('/', function(req, res) {
                           res.send(req.body.name);                                                  -- with the help of body-parser, you can extract the name from the request body.
                        });
                ---------------------------------------------------------------------------





Phase 15: Build Create Category Route...
        ====================================================================================
        * Once you've tested the Create category route, you can build the route out. You can
          go about it with either promises or async/await. async/await tends to be easier for
          me to work with, but promises work just as well. If you want find out more, check out
          my async study: https://github.com/john-azzaro/Study-Asynchronous-Programming-in-Node
        ====================================================================================

// Configure "Create Category Route"...
        ====================================================================================
        * If the test is successful, you can start to add the code needed to add a new 
          category name and add it to the mongodb database.
        ====================================================================================

        15.5: Create a variable "category" set to new category:
                ---------------------------------------------------------------------------
                        // Create Category Route
                        router.post('/', function(req, res) {
                           const category = new Category({                                            -- "category" const variable with properties to accept...
                              new: req.body.name                                                      -- ... which in this case is "name" with the value from the req.body of the input.
                           });                                                                           *Additionally, you want to EXPLICITLY tell the server what params we want it to accept
                        });                                                                              from the client, because otherwise the client could send something else that would
                                                                                                         then be added to the category object.
                ---------------------------------------------------------------------------


        15.6: Then save the new category to the database:
                ---------------------------------------------------------------------------
                        // Create Category Route
                        router.post('/', function(req, res) {
                           const category = new Category({                                    
                              new: req.body.name                                         
                           });        
                           category.save(function (err, newCategory) {                                -- Call the save method on the category object with a callback...  
                              if (err) {                                                              -- if there is an error...
                                 res.render('categories/new', {                                       -- render the category/new page again and...
                                    category: category,                                               -- ... keep the string the user put in the input (to help them see the issue) and...
                                    errorMessage: 'Error creating category'                           -- ... return an error message.
                                 });                                                   
                              } else {                                                                -- "else" the post being successfully submitted...
                                 res.redirect('categories');                                          -- redirect back to the categories page. *Note that you can comment out 
                              }                                                                          res.redirect(`categories/${newCategory.id}`); and uncomment it when we hook this  
                           });                                                                           post request up to the database via mongoose. What this will do is redirect to     
                        });                                                                              the newly created category!
                --------------------------------------------------------------------------- 


// Create error message partial...
        ===================================================================================
        * When you created the "create category route", you 
        ===================================================================================

        15.7: Create a partial file for the error message:
                ---------------------------------------------------------------------------
                        views  >  partials  >  errorMessage.ejs
                --------------------------------------------------------------------------- 

        15.8: Create error message partial:
                ---------------------------------------------------------------------------              If the error message is NOT set, run the code errorMessage.
                        <% if (locals.errorMessage != null) { %>                                      -- Note here that you need to wrap error messages in if statements like this.
                           <%= errorMessage %>                                                           The ejs does not have an "=" so its just output to the server.
                        <% } %>
                ---------------------------------------------------------------------------  

        15.9: Include the errorMessage partial in layout.ejs:
                ---------------------------------------------------------------------------
                        <%- include('../partials/header.ejs') %>
                        <%= include('../partials/errorMessage.ejs') %>                                 -- include the errorMessage partial.
                        <%- body %>
                ---------------------------------------------------------------------------
               

// Add async to the "Create Category Route"...
        ===================================================================================
        * So with async, it really straight forward. Add the async prefix and then wrap the
          existing code in a try/catch block so that if there are any errors in our mongoose
          implementation, we'll be able to "catch" them
        ===================================================================================

        15.10: Add the "async" prefix and add try/catch block:
                ---------------------------------------------------------------------------
                router.post('/', async function(req, res) {                                              -- added async prefix.
                   const category = new Category({
                      name: req.body.name
                });
                try {                                                                                    -- try/catch block
                   // success code here...
                } catch(err) {
                   // error code here...
                }
               
                                
                });
                ---------------------------------------------------------------------------

        15.11: Add the error part of the existing code:
                ---------------------------------------------------------------------------
                router.post('/', async function(req, res) {
                   const category = new Category({
                      name: req.body.name
                   });
                   try {

                   } catch(err) {                                                                         -- catch for error
                      res.render('categories/new', {
                      category: category,
                      errorMessage: 'Error creating category'
                      });    
                   }
                });
                ---------------------------------------------------------------------------

        15.12: Add the success part of the code:
                ---------------------------------------------------------------------------
                router.post('/', async function(req, res) {
                   const category = new Category({
                      name: req.body.name
                   });
                   try {
                      const newCategory = await category.save()                                           -- awaits for category.save to finish then populate the "newCategory" variable
                      // res.redirect(`categories/${newCategory.id}`);
                      res.redirect(`categories`);
                   } catch(err) {
                      res.render('categories/new', {
                      category: category,
                      errorMessage: 'Error creating category'
                      });    
                   }
                });
                ---------------------------------------------------------------------------





Phase 16: Display All categories feature to app:
        ====================================================================================
        * In this phase, we'll display all the categories we have in our database in a single
          place so that the user can choose which one to find all the issues that pertain to it.
        ====================================================================================

// Add async to All Categories route...
        ====================================================================================
        * Simply create add a async prefix, add a try/catch block when interacing with mongoose, 
          await searching Category via find for all categories, and render categories to 
          categories/index. 
        ====================================================================================
        
        16.1: Add async to the "all categories" route:
                ------------------------------------------------------------------------------
                        // All Categories Route
                        router.get('/', async function(req, res) {                                       -- add async prefix
                           try {                                                                         -- add try block to execute any code is successful with mongoose. 

                           } catch(err) {                                                                -- add catch block if any errors with implementation with mongoose.

                           }


                           //res.render('categories/index');                                              -- comment out existing code (makes it easier to work on)
                        });
                ------------------------------------------------------------------------------


        16.2: Build the all categories route:
                * Remember that there is bunch of functionality that you can perform on the
                  models that you call. For example, we could "find" all the categories in the
                  database (here accomplished with by passing an empty object). If there where
                  conditions for the .find method, they would go in that currently empty object.
                ------------------------------------------------------------------------------
                        // All Categories Route
                        router.get('/', async function(req, res) {                            
                           try {                                                                 
                              const categories = await Category.find({})                                -- "categories" variable that awaits a function on the Category model that "finds" all categories.
                              res.render('categories/index', { categories: categories});                -- render categories.
                           } catch(err) {                                                    
                              res.redirect('/');                                                        -- if an error (i.e. database is inaccessible), redirect to main page.
                           }
                        });
                ------------------------------------------------------------------------------


// Create view for all categories...
        ======================================================================================
        * On this page, we want to have a search form at the top and a list of all the categories
          listed on the bottom.
        ======================================================================================
        
        16.3: Create view for see all categories in categories > index.js:
                ------------------------------------------------------------------------------
                <h2>Search Categories</h2>
                <form action="/categories" method="GET">                                                 -- Form with GET categories pointing to categories index page (remember GET... not POST).
                   <label>Name</label>
                   <input type="text" name="name">
                   <button type="submit">Search</button>
                </form>
                <br>
                <% categories.forEach( function(category) { %>                                           -- To display all the categories, loop through each item in categories and create a div with the name.
                   <div><%= category.name %></div>                                                          When you go to "Categories" page, you should see all the names you 
                <% }) %>
                ------------------------------------------------------------------------------


// Implement search feature for categories...
        =======================================================================================
        * To implement a search feature, you can add search options which will check to see if
          the name exists, if it is an empty string, and then using regular expressions, take 
          that query name and lowercase it to search the database. The solution to this involves
          a regular expression which im not too fantastic about but it seems to be the best way
          to implement the feature from research.
        =======================================================================================

        16.4: Add search features to all categories route:
                ------------------------------------------------------------------------------
                // All Categories Route
                router.get('/', async function(req, res) {
                   let searchOptions = {};                                                               -- "searchOptions" will store all the parameters for our search.
                   if (req.query.name !== null && req.query.name !== '') {                               -- if the request query (in the url) is not available AND not an empty string...
                      searchOptions.name = new RegExp(req.query.name, 'i');                              -- this will allow us to search for only part of the text in the field.
                   }
                   try { 
                      const categories = await Category.find({searchOptions})                            -- add "searchOptions" to find!
                      res.render('categories/index', { 
                        categories: categories, 
                        searchOptions: req.query                                                         -- and send back the request to the user so the field will be repopulated.
                      });  
                   } catch(err) {
                      res.redirect('/');
                   }
                });
                ------------------------------------------------------------------------------


// In index.js, add searchOptions as a value to the form...
        =======================================================================================
        * In the input form, add as a value the search options.
        =======================================================================================

        16.5: Add searchOptions as a value to the form:
                -------------------------------------------------------------------------------
                        <h2>Search Categories</h2>
                        <form action="/categories" method="GET">    
                        <label>Name</label>
                           <input type="text" name="name" value="<% searchOptions.name %>">              -- add searchOptions as the value.
                           <button type="submit">Search</button>
                        </form>
                        <br>
                        <% categories.forEach( function(category) {  %>
                           <div><%= category.name %></div>
                        <% }) %>
                -------------------------------------------------------------------------------





Phase 17: Add "issue" controller and view:
        ========================================================================================
        * Now that the category funcitonality has been sorted, we need to create the "issue"s
          that we can then file to the categories we have.
        ========================================================================================

// Create a "issues.js" router...
        =========================================================================================
        * Now because we've already done most of the work of creating a router file for 
          categories.js, we simply need to duplicate the categories.js, put it in issues.js, and 
          then clear out the logic inside the routes. The logic will be a bit more complex because
          we have a few more inputs and features to integrate.
        =========================================================================================
        
        17.1: Create issue.js router file:
                ---------------------------------------------------------------------------------
                        //Imports
                        const express = require('express');
                        const router = express.Router();
                        const { Issue } = require('../models/issue');                                     -- Import "Issue" model from models.


                        // Routes
                        // All Issues Route
                        router.get('/', async function(req, res) {
                        
                        });


                        //New Issue Route
                        router.get('/new', function(req, res) {
                        
                        });


                        // Create Issue Route
                        router.post('/', async function(req, res) {
                        
                        });
                ---------------------------------------------------------------------------------


// Create an "issue" model...
        =========================================================================================
        * We can do the same thing that we did for the issue,js router by copying the logic inside
          the category.js model file and pasting it into the issue model and amending it accordingly.
        =========================================================================================

        17.2:   Create issue model:
                ----------------------------------------------------------------------------------
                const mongoose = require('mongoose');

                const bookSchema = new mongoose.Schema({
                  title: {                                                                                 -- Title of issue (required)
                    type: String,
                    required: true,
                  },
                  problem: {                                                                               -- Problem that caused the issue (required)
                    type: String,
                    required: true
                  },
                  comments: {                                                                            -- extended description (if needed)
                    type: String,
                  },
                  solution: {                                                                               -- solution (when found)
                    type: String,
                  },
                  imageName: {                                                                              -- image of screencap of issue (if needed)
                    type: String,
                  },
                  createdAt: {                                                                              -- issue created (required)
                    type: Date,
                    require: true,
                    default: Date.now
                  },
                  category: {                                                                               -- Category type (required)
                    type: mongoose.Schema.Types.ObjectId,                                                    -- reference of the object id
                    required: true,
                    ref: 'Category'
                  }
                });

                const Book = mongoose.model('Book', bookSchema);

                module.exports = { Book };
                ----------------------------------------------------------------------------------

                ==================================================================================
                * Here's the basic format this model is going to accomplish:

                   Title:____________________________________________________________________
                   Created:_____________________________   Category:_________________________
                   Problem:__________________________________________________________________
                   Solution:_________________________________________________________________
                                 
                   Image-of-issue                      Comments:_____________________________                    

                ==================================================================================


// Add issue router to server.js...
        ===========================================================================================
        * Once you have the model done, you need to loaf the router into your server.js file and then
          tell the app to use the router.
        ===========================================================================================

        17.3: Add router and set:
                ------------------------------------------------------------------------------------
                        // Routers
                        const issueRouter = require('./routes/issues');                                     -- load router to server.js

                        // Middleware
                        app.use('/issue', issueRouter);                                                     -- tell app that all issue routes will go to issueRouter
                ------------------------------------------------------------------------------------


// Add issue links to header.js...
        ============================================================================================
        * Because the we already have a view for the navigation created (i.e. header.js), we simply
          need to add the links to this partial file. Since this is basically a duplicate process 
          compared ot the categories process, all you need to do is copy and paster the two existing
          links for all categories and new categories and change the url and names.
        ============================================================================================

        17.4: Add issue links to header.js:
                ------------------------------------------------------------------------------------
                <header>
                  <nav>
                  <a href="/">IssueIndex</a>
                  <ul>
                     <li><a href="/categories">Categories</a></li>
                     <li><a href="/categories/new">Add Category</a></li>
                     <li><a href="/issues">Issues</a></li>                                                  -- Link to all issues
                     <li><a href="/issues/new">Add Issue</a></li>                                           -- LInk to add issue
                  </ul>
                  </nav>
                </header>
                ------------------------------------------------------------------------------------



// Test issue route...
        ============================================================================================
        * In issue.js, test the all issues route by sending a basic response (res.send)
        ============================================================================================

        17.4: Insert test routes for issue.js:
                ------------------------------------------------------------------------------------
                        // Routes
                        // All Issues Route
                        router.get('/', async function(req, res) {
                           res.send('All issues works!');                                                    -- at localhost:3000/issues you will see the message
                        });


                        //New Issue Route
                        router.get('/new', function(req, res) {
                           res.send('New issues works!');                                                    -- at localhost:3000/issues/new you will see the message
                        });


                        // Create Issue Route
                        router.post('/', async function(req, res) {
                           res.send('Create issues works!');                                                
                        });
                ------------------------------------------------------------------------------------




Phase 18: Add "new issues" to views
        =============================================================================================
        * Roughly the same thing we did with adding new categories, so you can copy and paste the 
          entire file, rename it, and adjust accordingly
        =============================================================================================

// Create an "issues" file...
        ==============================================================================================
        * Create a new folder inside views for the issue views.
        ==============================================================================================

        18.1: Create issue file:
                --------------------------------------------------------------------------------------
                        views  >  issues
                --------------------------------------------------------------------------------------

 // Create a "new.ejs" file for new issues...
        =============================================================================================
        * Again, roughly the same thing done for the new.ejs file for category.
        =============================================================================================

        18.2: Create new.ejs file for new issue:
                -------------------------------------------------------------------------------------
                     <h2>New Issue</h2>
                     <form action="/issues" method="POST">
                       <%- include('_form_fields') %>
                       <a href="/issues">Cancel</a>
                       <button type="submit">Create</button>
                     </form>
                -------------------------------------------------------------------------------------

// Add form field partial for issue _form_fields.ejs...
        =============================================================================================
        * Again, same thing as done for categories. Copy and paste the _form_fields.ejs partial and 
          paste it in the issues folder, change the names and values to suit. However, this form
          will be substantially larger because we have a few more areas we want to include. In the case
          of this form partial, we want to be able to selct a category from our exiting list. To do this, 
          we nee dot loop through the categories and select the one that fits the best.
        =============================================================================================

        18.3: Add field form partial with all the forms you need:
                --------------------------------------------------------------------------------------
                        <label>Name</label>
                        <input type="text" name="title" value="<%= issue.title %>">                       -- remember to change the name (title) and value (issue.title).
                        
                        <label>Name</label>
                        <input type="text" name="title" value="<%= issue.title %>">     
                        <label>Category</label>
                        <select name="category">
                        <% categories.forEach( function(category) { %>
                        <% if (issue.id == issue.category) { %>
                        <option selected label="<%= category.name %>" value="<%= category.id %>">
                        <%= category.name %>
                        </option>
                        <% } else { %>
                        <option label="<%= category.name %>" value="<%= category.id %>">
                        <%= category. name %>
                        </option>
                        <% } %>
                        <% }) %>
                        </select>
                
                --------------------------------------------------------------------------------------

// In issues router, add new issue route...
        =============================================================================================
        * Now we can hook everything up. This really is all just about the same as what what done for
          categories, its just creating a new layer of search and create, etc.
        =============================================================================================

        18.4: Import Category router:
                ------------------------------------------------------------------------------------
                        const { Category } = require('../models/category');
                ------------------------------------------------------------------------------------


        18.4: Add new issue route:
                -------------------------------------------------------------------------------------
                //New Issue Route
                router.get('/new', async function(req, res) {
                  try {
                    const categories = await Category.find({});                                       -- get all categories, categories equal to await (i.e. wait until) Category model and find everything (i.e. {})
                    const issue = new Issue();                                                        -- create a new Issue
                    res.render('issues/new', {                                                        -- if successful, render issues/new and pass in variables
                      categories: categories,                                                         -- send categories to new page and...
                      issue: issue                                                                    -- send issues to the new page.
                    })                      
                    } catch (err) {
                       res.redirect('/issues');                                                       -- if the are any errors, redirect back to the /issues page.
                    }
  
                -------------------------------------------------------------------------------------


// Complete form field partial for add issue...
        ============================================================================================
        * To finish off the form field partial for adding issues, just add the remaining fields that
          you specified in your models file.
        ============================================================================================

        18.5: Complete form partial for add issue:
                ------------------------------------------------------------------------------------
                <div>
                <label>Name</label>                                                                    -- Name of the issue.
                <input type="text" name="title" value="<%= issue.title %>">    
                </div>

                <div>
                <label>Category</label>                                                                -- Category selector
                <select name="category">
                <% categories.forEach( function(category) { %>
                <% if (issue.id == issue.category) { %>
                <option selected label="<%= category.name %>" value="<%= category.id %>">
                <%= category.name %>
                </option>
                <% } else { %>
                <option label="<%= category.name %>" value="<%= category.id %>">
                <%= category. name %>
                </option>
                <% } %>
                <% }) %>
                </select> 
                </div>

                <div>
                <label>Description</label>                                                              -- Issue description
                <textarea name="description" value="<%= issue.description %>"></textarea>    
                </div>

                <div>
                <label>Solution</label>                                                                 -- Issue solution
                <textarea name="solution" value="<%= issue.solution %>"></textarea>    
                </div>

                <div>
                <label>Image</label>                                                                    -- image of issue if applicable.
                <input type="file" name="image">    
                </div>

                ------------------------------------------------------------------------------------


















Phase X: Deploy to App to Heroku
* testing with heroku git connection
==================================================================================================
* https://github.com/john-azzaro/Study-Cloud-Deployment-with-Heroku 2009
==================================================================================================
 
 STEP 1 - In heroku dashboard, click "New" > "Create New App"
 STEP 2 - Give the App a name
 STEP 3 - Click the "Github" connection
 STEP 4 - Connect app to github by finding the repository (will automatically update)
 STEP 5 - Go to settings > config vars > reveal config vars and put the key. this is in the env file and is DATABASE_URL
          The value for the key is going to come from Mongodb atlas.
STEP 6 - In mongodb Atlas, Either build a new cluster (and save the password) OR the password (i.e. mypassword123, abc123, etc... whatever you specify) 
STEP 7 - then in mongodb atlas, select the "connect your application".
STEP 8 - Then, you will get a connection string. copy this string into a document and replace the password with your own.\
STEP 9 - Paste in the connection string into the value of your config vars in mongodb and click "Add".
STEP 10 - You should have a working app at the heroku address (https://issueindex.herokuapp.com/)




Resources
==========
https://www.npmjs.com/package/express-ejs-layouts  -- ejs layouts file
https://scotch.io/tutorials/use-ejs-to-template-your-node-application  -- ejs layouts outline
https://www.includehelp.com/node-js/ejs-layouts.aspx  -- ejs layouts
https://stackoverflow.com/questions/38306569/what-does-body-parser-do-with-express -- body-parser sum