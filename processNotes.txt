Process notes for Issue Index Application
==========================================




About Process Notes
===================
"Process Notes" is a step-by-step workflow document that outlines the "phases" of app development and the successive steps
for each phase. Although documenting each step of the application development from start to finish is a bit more work, it 
has proven EXTREMELY valuable in bug hunting and ESPECIALLY refining workflow for future use. If you've seen my other projects
and process notes, you'll notice that the process notes evolve as I find ways to improve the documentation for content
and readability. In the case of the "issue index app", each phase has a title, brief description of the phase, individual steps
for each phase (with notes and intent), and notes at the end.



Objective and User Story
=========================
The objective of this application is to provide an accessible "index of issues and solutions" for a given project (which could be anything). 
The user would visit the main page and be presented with recent additions, categories, and individual issues to browser. There would be search
functionality for categories and issues. The user would have the ability to add categories and issues and have the ability to edit or remove
categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource by nature.




Process Workflow Summary
========================

    Phase 1: Project Setup.
    Phase 2: Create express app
    Phase 3: Setup MVC file structure and public folder.
    Phase 4: Setup server.
    Phase 5: Create a Router.
    Phase 6: Configure app for ejs.
    Phase 7: Setup views and layouts.
    



Extended Process Workflow Summary
=================================

    Phase 1: Project Setup:
        1. Project Setup
        2. Install Express
        3. Add .gitignore
        4. Add custom start scripts.
        5. Add server.js

    Phase 2: Create express app:
        1. Setup express
 
    Phase 3: Setup MVC file structure and public folder:
        1. Create MVC folder.
        2. Create public folder.
   
    Phase 4: Setup server:
        1. Create server.
        2. Run server.
        3. Test server in browser.

    Phase 5: Create a Router:
        1. 
        2. 
        3. 
        4.
        5.
        
    Phase 6: Configure app for ejs.
    Phase 7: Setup views and layouts.



Phase 1: Project Setup
=========================================================================================
 * Basic setup, installation of dependencies, development environment setup, and essential 
   files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1.1:  Issue-Index-App                                     -- Create a folder to store you application.
        1.2:  npm init                                            -- Create a package.json file to start the project off.

    // Install express:
        1.3:  npm install express                                 -- Install express.

    // Add .gitignore file for node_modules:        
        1.4:  .gitignore > node_modules                           -- Tell git to ignore node_modules folder.
        1.5:  npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        1.6:  "devStart": "nodemon server.js"                     -- Run development environment (npm run devStart).
        1.7:  "start": "node server.js"                           -- Run server normally in a production environment (npm run start).
        
    // Create initial application files:       
        1.8:   server.js                                          -- Create main server file.
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * 1.2 -- Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * 1.4 -- Submit everything AFTER you create the .gitignore file and add node_modules.
            * 1.6 -- Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * Note -- You can have multiple custom scripts. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    





Phase 2: Create express app
=============================================================================================================
  * Create express application, import initial "set" configuration settings and middlewares.
=============================================================================================================

    // Setup express application...
        * When you import libraries, you are essentially importing the 
          packages you have installed via npm. To use exprees, you simply 
          need to load it and instantiate it.

        2.1: Setup express:
            ---------------------------------------------------------
                    const express = require('express');                     -- Imports express from express library.
                    const app = express();                                  -- Get the app portion from the express librrary to instantiate the app.
            ---------------------------------------------------------      


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * 2.1 -- When you import libraries, you are essentially importing the packages you have installed via npm.
            * 2.1 -- These are not the only libraries added nore the only middleware to be used. However, I find it easier to load the intial 
                     libraries first and then add in libraries as you go along (i.e. mongoose, etc.) because then you can keep track of the process 
                     and make sure you dont miss anything.          

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    





Phase 3: Setup MVC file structure and public folder.
==========================================================================================================
 * For larger applications, use MVC (Model View Contoller) file structure for efficientcy and consistency.
==========================================================================================================

    // Setup MVC file structure...    
        *  Model View Controller is a design pattern for our application. Currently, 
           we have View (i.e. "views" folder) and Controller (i.e. "routes" folder). 
           You'll also need a Model ("models" folder) eventually to house all our 
           database models to complete the design pattern.

        3.1: Create MVC folders:
                --------------------
                    models            -  (M)odels
                    views             -- (V)iews
                    routes            -- (C)ontroller 
                --------------------


    // Setup a "public" file...
        * The "public" folder is used to store and serve static files, like stylesheets, 
          javascript, images, etc. Anything initially requested clientside goes here.
        
        3.2 Create and use public folder:          
                ---------------------------------------------------------
                        app.use(express.static('public'));                      -- Tell express all public files kept in public folder.
                ---------------------------------------------------------    
                --------------------------------------------------------
                        public                                                  -- Create folder for storing static assets.
                ---------------------------------------------------------

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:             
          * 3.1 -- The "models" folder will contain mongoose schemas and models.
          * 3.1 -- The "views" folder will contain different views of the files (i.e. ejs files, etc).
          * 3.1 -- The "routes" folder will contain controllers (i.e. CRUD routes) 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  





Phase 4: Setup server
=============================================================================================================
-- Create a server to listen on a given port and test the connection to ensure working functionality.
=============================================================================================================

    // Create server...
        * Although there are different ways to setup a server, the method
          below is best for eventual integration testing.

        4.1: Create server:
            ----------------------------------------------------------
                    let server; 
                    server = app.listen(3000, function() {   
                        console.log(`Listening on port 3000...`);   
                    });
            ----------------------------------------------------------
      
    // Test your server...
        * Use "npm run devStart" for developer environment.
        * Use "npm run start" for production environment.

        4.2: Run your application:
            -----------------------------------------------------------------------
                    $ npm run devStart

                    > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                    > nodemon server.js

                    [nodemon] 2.0.2
                    [nodemon] to restart at any time, enter `rs`
                    [nodemon] watching dir(s): *.*
                    [nodemon] watching extensions: js,mjs,json
                    [nodemon] starting `node server.js`
                    Your app is listening on port 3000
            -----------------------------------------------------------------------


        4.3: Test your application in browser:
            * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
              but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:       
            * 4.1 -- So for the intial set-up of the server, you can initially setup a basic app.listen and the port number. However, if
                     you want to run integration tests later, you will need to configure your server in a more complex way. Procedurally, 
                     it makes the most sense when I get to this point to then add in the elements that will make this work now. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 5: Create a Router
=============================================================================================================
-- Because this application is going to larger, we want to create a "Router" that modularizes all the routes
   that we'll have for the application and keep our server.js file clean.
=============================================================================================================

    // Create a route file...
        * Earlier we created our MVC file structure with a "routes" folder. This routes
          folder is going to hold all the routes we wish to modularize to help keep our
          server.js file clean.

        5.1: Create an "index.js" route inside the "routes" folder:
            -----------------------------------------------------------------
                    routes  >  index.js                                             -- "index.js" route created for catch-alls in "routes" folder.
            -----------------------------------------------------------------
        

    // In "index.js", setup express, router, and export...
        * For each router file you create, you need to load express, the router portion
          of express, and export the module (i.e. this "index.js" file) to server.js.

        5.2: In index.js, setup the router by loading express, router, and export:
            -----------------------------------------------------------------
                    const express = require('express');                             -- Load express.
                    const router = express.Router();                                -- Load router portion of express.

                    ...
                    ...
                    ...

                    modules.exports = router;                                       -- Export the module "router" (which will hook up to "router" in server.js).
            -----------------------------------------------------------------

        5.3: Create a test route to the root of the application (i.e. '/'):
            -----------------------------------------------------------------
                    router.get('/', function(req, res) {                            -- This route should return "This is a test" in your localhost root request.
                        res.send('This is a test');
                    });
            -----------------------------------------------------------------


    // In "server.js", hook-up "index.js" to "server.js"...
        * Essentially, once you have the router setup correctly, you can link it to 
          the server.js file so that you have full use of the seperate route module.
   
        5.4: Load "index.js" to "server.js":
            -----------------------------------------------------------------
                    const indexRouter = require("./routes/index");                  -- Hooks up application to the index.js file in the routes folder.
            -----------------------------------------------------------------

        5.5: Add indexRouter middleware so that the application can use it:
            -----------------------------------------------------------------
                    app.use("/", indexRouter);                                      -- Middleware says that for root request, use indexRouter.
            -----------------------------------------------------------------

    // Test route
        * To test, go to localhost:3000 in your browser.    
        
        5.6: Test the route.    
            -----------------------------------------------------------------
                    localhost:3000   >   This is a test
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * 5.1 -- Use "index.js" in "routes" as a catch-all for everything that doesnt have a resource or a model.
            * 5.1 -- Create a Router with a routes folder and initial route file index.js to better organize 
                     the routes we have instead of collecting everything in the server.js folder. 
            * 5.4 -- When assigning the name as "indexRouter" and as a value pass in the relative path (i.e. "./routes/index"), note that "./" is 
                     relative to where the route is. Also notice when you put in the initial relative path (./), intellesense will show you the folders 
                     and the file.
            * Note -- For more information on express router, see my study that outlines a basic setup: https://github.com/john-azzaro/Study-Express-Router
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 6: Configure app for ejs.
=============================================================================================================
--  For this application, we're going to be using a template engine called ejs that will allow us to reuse
    outr HTML over many pages without having to repeat our code.
=============================================================================================================


    // Load EJS and set EJS as the view engine
        * Installing ejs and express-ejs-layouts as well as setting the view 
          engine to ejs will allow you to use ejs in your application.

        6.1: Install ejs and express-js-layouts with npm:   
            -----------------------------------------------------------------
                    npm install ejs express-ejs-layouts                             -- Npm install of "ejs" and "express-ejs-layouts"                                                                
            -----------------------------------------------------------------
            
        6.2: Set view engine to ejs: 
            -----------------------------------------------------------------
                app.set("view engine", "ejs");                                   -- Set the view engine to ejs.
            -----------------------------------------------------------------


    // Load and use express-ejs-layouts
        * Layouts enable us to dynamically fix content or elements to a page 
          in such a way that even if a different page is requested, the content 
          remains but the page is successfully accessed.

        6.3: Import expressLayouts:
            -----------------------------------------------------------------
                    const expressLayouts = require('express-ejs-layouts');          -- Import the express layouts package.
            -----------------------------------------------------------------  

        6.4: Use express layouts (middleware):
            -----------------------------------------------------------------
                    app.use(expressLayouts);                                        -- Tell the application that we want to use "express layouts"
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note -- When you configure your app, you are setting the settings such as the behavior of the app (in 
                      the case of views and view engines), etc. You use the "app.set()" and assign a name and a value.
            * Note -- Since I like to do things organically with application development, I thought it best to install ejs in full 
                      in a later phase. In the case of this project, we want to use a template engine (ejs) and be able to have a 
                      layout file for our HTML (express-ejs-layouts).   
            * Note -- Before you begin using ejs with your app, make sure you have the ejs language support installed in VSCode.
            * Note -- For more information on EJS, see my template engine study: https://github.com/john-azzaro/Study-Template-Engines   

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 7: Setup views and layouts.
================================================================================================================
--  Setting up views and layouts by hooking up "views" folder and setting layouts/layout as the central layout.
================================================================================================================

    // Setup views and layouts
        * Since we've already created the "views" folder as part of out MVC 
          design pattern, what want to hook these folders and files up so when
          we start using ejs in the next phase, everything will function correctly.

        7.1: Set location of views folder:       
            -----------------------------------------------------------------
                    app.set("views", __dirname + "/views");                         -- Sets views to draw from "views" folder (which we made for our MVC pattern). 
            -----------------------------------------------------------------  
    
        7.2: Set "layouts" file in "views":
            -----------------------------------------------------------------
                    app.set("layout", "layouts/layout");                            -- Sets layout file so you can reuse HTML like the header and the footer.
            -----------------------------------------------------------------

        7.3: Create "layout" folder inside "views" folder:
            * This folder will hold the layouts for our app.
            -----------------------------------------------------------------
                    views  >  layouts                                               -- "layouts" subfolder in views to hold the layouts for our app.
            -----------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * Note -- Since I like to do things organically with application development, I thought it best to install ejs in full 
                      in a later phase. In the case of this project, we want to use a template engine (ejs) and be able to have a 
                      layout file for our HTML (express-ejs-layouts).   
            * Note -- Before you begin using ejs with your app, make sure you have the ejs language support installed in VSCode.
            * Note -- For more information on EJS, see my template engine study: https://github.com/john-azzaro/Study-Template-Engines
            * 7.1 --  You could also do path.join(__dirname, '/views') depending on your preference.    

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






Phase 8: Integrate routes with views.
=============================================================================================================
--  
=============================================================================================================

    // Create a layout "view" file...
        * In the case of "layout.ejs", we are creating a central "view" which is the
          primary HTML document that our entire application will use. This comes in 
          handy because we dont have to repeat the code over and over again, we will
          just need to insert the different pages inside this layout view.

        8.1: Create a "layout.ejs" file inside the new layouts subfolder:
            -----------------------------------------------------------------
                    views  >  layouts  >  layout.ejs                             -- "layout.ejs" for global boilerplate HTML for every page in the application.
            -----------------------------------------------------------------



    // Create a primary HTML template for the layout view...
        * This will be your standard HTML document which would be much the same
          as a static HTML document.

        8.2: In layout.ejs, insert your HTML template:
        ------------------------------------------------------------------
                <!DOCTYPE html>                                              -- Boilerplate HTML that will show for every page in the application.
                <html lang="en">
                <head>
                    ...meta...
                </head>
                <body>
                </body>
                </html>
        ------------------------------------------------------------------
    
        8.3: Insert EJS "body "element for page specific content:
            * Inside the body, using <%-  and %> tags will utilize ejs.
            ------------------------------------------------------------------
                    <!DOCTYPE html>                                            
                    <html lang="en">
                    <head>
                        ...meta...
                    </head>
                    <body>

                        Before                                                     -- "Before" added for testing.
                        <br>
                        <%- body %>                                                -- All page specific content will be included "body" element.
                        <br>
                        After                                                      -- "After" added for testing.

                    </body>
                    </html>
            ------------------------------------------------------------------    


    // Create another "view" in the views folder...
        * This step is essentially to test that the views are integrated with the router.

        8.4: Create a "index.ejs" file in "views" and test.
            ------------------------------------------------------------------
                    views  >  index.ejs                                            --"index.js" inside the "view" folder (note: add "middle" text to test).
            ------------------------------------------------------------------ 


    // Integrate the route with the view...
        * Finally, this is the point where you integrate the route (in "index.js") with the
          view (in index.ejs). 

        8.5: Replace "send" with "render" in index.ejs route and pass in the view (i.e. index):
            
            ------------------------------------------------------------------
                    router.get('/', function(req, res) {
                        res.render('index');                                        -- "res.send" changed to "res.render" with the name of the view.
                    });
            ------------------------------------------------------------------


    // Test the integration...
    
        7.8: Test in localhost:3000
            ------------------------------------------------------------------
                    Before                                                          -- "Before" is in layout.ejs view.
                    Middle                                                          -- "Middle" is in index.ejs view.
                    After                                                           -- "After" is in layout.ejs view.
            ------------------------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * 7.1 -- The HTML boilerplate is not ejs specific... this is just a standard HTML template that will be shows for every page in the app.
                     In other words, we only have to do this template ONCE and reuse it for each page in our application.
            * 7.2 -- To insert the page specific, we simply need to insert an ejs element and assign it the name body: <%- body %>.
            * 
                      
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////












Resources
==========
https://www.npmjs.com/package/express-ejs-layouts  -- ejs layouts file
https://scotch.io/tutorials/use-ejs-to-template-your-node-application  -- ejs layouts outline
https://www.includehelp.com/node-js/ejs-layouts.aspx  -- ejs layouts