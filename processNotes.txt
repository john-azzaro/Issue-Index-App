Process notes for Issue Index Application
==========================================




About Process Notes
===================
Process Notes is documentation of the procedure I take when creating my apps, in this case the "Issue Index Application". 
Though this might seem like a bit of extra work, documenting my creation of the app from start to finish has proven to be 
extremely valuable in bug hunting and refining my workflow for future use. I have tried to break down my process into "phases" 
with at least several steps to accomplish that phase before moving on. Each step documents what I do. At the end of the phase
I like to jot down special notes (if any) for future reference and comparison. I also have additional resources with links for 
solutions to issues I come across for reference.




Objective and User Story
=========================
The objective of this application is to provide an accessible "index of issues and solutions" for a given project (which could be anything). 
The user would visit the main page and be presented with recent additions, categories, and individual issues to browser. There would be search
functionality for categories and issues. The user would have the ability to add categories and issues and have the ability to edit or remove
categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource by nature.




Process Workflow Summary
========================

    Phase 1: Initial Project Setup.
    Phase 2: Setup MVC file structure.
    Phase 3: Import initial libraries, configure app, and middleware.
    Phase 4: Setup initial server.
    Phase 5: Create index.js with initial routes. 



Phase 1: Initial Project Setup
=========================================================================================
 * This phase is comprised of basic setup, installation of dependencies, development 
   environment setup, and essential files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1.1:  Issue-Index-App                                     -- Create a folder to store you application.
        1.2:  npm init                                            -- Create a package.json file to start the project off (you can use npm inti -y to skip the questions).

    // Install express:
        1.3:  npm install express                                 -- Install express (note: you can also type "npm i" to install).

    // Add .gitignore file for node_modules:        
        1.4:  .gitignore > node_modules                           -- Add .gitignore file to ignore node_modules folder that was just added when you installed express.

    // Install application dependencies:
        1.5:  npm install ejs express-ejs-layouts                 -- Install any other dependencies (if you need to at the outset of the project like mongoose).
                                                                  In the case of this project, we want to use a template engine (ejs) and be able to have a layout file
                                                                  for our HTML (express-ehs-layouts).

        1.6:  npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        1.7:  "devStart": "nodemon server.js"                     -- Running this command makes starting your server a little more streamlined.
        1.8:  "start": "node server.js"                           -- Running this command will start the server normally in a production environment.
        
    // Create initial application files:       
        1.9:   server.js                                       -- Creates a .js file for server code.
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * Submit everything AFTER you create the .gitignore file and add node_modules.
            * Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * You can have multiple custom scripts. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    




Phase 2: Setup MVC file structure
=====================================================================================================
 * While smaller application will have routes clustered together in the server.js file, for larger 
   applications it can messy pretty quickly so we need to setup our MVC (Model View Contoller) file
   structure for efficientcy and consistency.
=====================================================================================================

    //Setup MVC folder structure:
        2.1: Create MVC folders:
            * The "models" folder will contain our mongoose schemas and models.
            * The "views" folder is going to be where all the different views of the files are going to go.
            * The "routes" folder is for our controllers (i.e. CRUD routes).
                --------------------
                    models            -  (M)odels, which will contian all mongoose models.
                    views             -- (V)iews, which will contain all ejs files.
                    routes            -- (C)ontroller (i.e. routes), which will contain all routes.
                --------------------

        2.2: Create a "public" folder:     
            * The "public" folder is used to serve static files. This going to be where all the public files 
              like stylesheets, javascript, images, etc.
                --------------------
                    public            -- Folder for storing static assets
                --------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:             
          * Quick note about MVC: Model View Controller is a design pattern for our application. Currently, we have 
            View (i.e. "views" folder) and Controller (i.e. "routes" folder). We will also need a Model ("models" folder) 
            to house all our database models to complete the design pattern.
          * Although the public folder isnt technically part of the MVC file structure, it is part of the overall file structure  
            so I like to add this folder in here at this point. 

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////  




Phase 3: Import initial libraries, configure app, and middleware
=============================================================================================================
  * This phase involves the initial library importation, set configuration setting, and middleware.
=============================================================================================================

    // Import Libraries:
        3.1:  Import initial libraries:
                ---------------------------------------------------------
                    const express = require('express');                       -- imports express from express library.
                    const app = express();                                    -- get the app portion from the express librrary to instantiate the app.
                    const expressLayouts = require('express-ejs-layouts');    -- import the express layouts package.
                ---------------------------------------------------------      

    // Configure app:
        3.2: Configure your app:
            * When you configure your app, you are setting the settings such as the behavior of the app (in 
              the case of views and view engines), etc. You use the "app.set()" and assign a name and a value.
                ---------------------------------------------------------
                    app.set("view engine", "ejs");                             -- sets the view engine
                ---------------------------------------------------------
            
            * Then, set the location of your "views" folder.
                ---------------------------------------------------------
                    app.set("views", __dirname + "/views");                    -- sets "views" to current directory and append to "/views" folder.
                ---------------------------------------------------------

            * Next, set your layout file.
            A layout file will allow use to reuse HTML like the header and the footer.
                ---------------------------------------------------------
                    app.set("layout", "layouts/layout");                       -- sets layout file in layouts folder.
                ---------------------------------------------------------

    // Add middleware:
        3.3: Add initial middleware:
            * Tell the application that we want to use "express layouts"...
                -------------------------------------------------
                    app.use(expressLayouts);                                   -- use expressLayouts we imported for use in the app.
                -------------------------------------------------

            * Additionally, we want to tell express where all our public files are going to be when 
              requested by the client.
                -------------------------------------------------
                    app.use(express.static('public'));                         -- static files will be kep in the folder "public"
                -------------------------------------------------


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * These are not the only libraries added nore the only middleware to be used. However, I find it easier to load the intial libraries 
              first and then add in libraries as you go along (i.e. mongoose, etc.) because then you can keep track of the process and make sure 
              you dont miss anything.          

        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    




Phase 4: Setup initial server
=============================================================================================================
-- This phase will set-up the server to listen on a given port 
=============================================================================================================
    * So for the intial set-up of the server, you can initially setup a basic app.listen and the port number. However, if
      you want to run integration tests later, you will need to configure your server in a more complex way. Procedurally, 
      it makes the most sense when I get to this point to then add in the elements that will make this work now. 


    4.1: Create a (temporary) basic server to test the connection:
        * Note: It's a bit easier just to do the second method because integrated testing should be standard practice so this
                adds a bit of future proofing to the code. 
        ----------------------------------------------------------                     ----------------------------------------------------------
            app.listen(3000, function() {                                                 let server; 
                console.log('Your app is listening on port 3000');         or...          server = app.listen(3000, function() {   
            });                                                                               console.log(`Listening on port 3000...`);   
        ----------------------------------------------------------                        });
                                                                                       ----------------------------------------------------------
      
    4.2: Test your connection:
        * In gitbash, you will can run the server by running the custom script "devStart" with "npm run devStart".
        * Remember that using "devStart" will enable nodemon so your server will reset after each change made to the code.
        * If successful, you will see something like this:

            -----------------------------------------------------------------------
                $ npm run devStart

                > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                > nodemon server.js

                [nodemon] 2.0.2
                [nodemon] to restart at any time, enter `rs`
                [nodemon] watching dir(s): *.*
                [nodemon] watching extensions: js,mjs,json
                [nodemon] starting `node server.js`
                Your app is listening on port 3000
            -----------------------------------------------------------------------

    4.3: Test your application in browser:
        * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
          but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * If you want to get in the habit of creating a server and account for EVENTUAL test integration, creating the server the second way
              in step 2.2 is preferable. When the time comes, you would simply need to replace the port number (i.e. 3000) and the message when you
              integrate this into the runServer function.  
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////





Phase 5: Create index.js with initial routes
=============================================================================================================

=============================================================================================================

    4.1: Create an "index" route:
        * The index route is created as a catch-all for everything that doesnt have a resource or a model.
        * To do this, you need to create a "index.js" file inside "routes".
            ---------------------------------------------------
                routes  >  index.js
            --------------------------------------------------- 
    

    4.2: In index.js, load the express and router and export:
        * Doing this loads express and uses the router portion of the express variable.
            ----------------------------------------------------
                const express = require('express');                   -- load express.
                const router = express.Router();                      -- load router portion of express.

                modules.exports = router;                             -- exports 
            ----------------------------------------------------


    4.3: Hook up the application to the router in server.js:
        * Hooking up the router will let you link the "index.js" file to the "server.js" file.
        * We asssign the name as "indexRouter" and as a value pass in the relative path (i.e. "./routes/index").
        * Note that "./" is relative to where the route is.
        * Notice when you put in the initial relative path (./), intellesense will show you the folders and the file.
            ----------------------------------------------------
                const indexRouter = require("./routes/index");
            ----------------------------------------------------


    4.4: Add indexRouter middleware so that the application can use it:
        * Now that router is hooked up to server.js, the application now needs to be able to use it with this middleware.
        * In the case below, the root path "/" and the router to handle that route is "indexRouter".
            ----------------------------------------------------
                app.use("/", indexRouter);
            ----------------------------------------------------


    4.3: Create a route for the root of the application (i.e. '/'):
        * 



        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * For more information, see my express router study that outlines a basic router setup: https://github.com/john-azzaro/Study-Express-Router
                    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////











Resources
==========
https://www.npmjs.com/package/express-ejs-layouts  -- ejs layouts file
https://scotch.io/tutorials/use-ejs-to-template-your-node-application  -- ejs layouts outline