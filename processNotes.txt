Process notes for Issue Index Application
==========================================




About Process Notes
===================
Process Notes is documentation of the procedure I take when creating my apps, in this case the "Issue Index Application". 
Though this might seem like a bit of extra work, documenting my creation of the app from start to finish has proven to be 
extremely valuable in bug hunting and refining my workflow for future use. I have tried to break down my process into "phases" 
with at least several steps to accomplish that phase before moving on. Each step documents what I do. At the end of the phase
I like to jot down special notes (if any) for future reference and comparison.




Objective and User Story
=========================
The objective of this Application is to provide an accessible issue tracking and solution for a given project (which could be anything). 
The user would visit the main page and be presented with recent additions, categories, and individual issues to browser. There would be search
functionality for categories and issues. The user would have the ability to add categories and issues and have the ability to edit or remove
categories and issues as well. Additionally, the project will not include user authentication since it is crowdsource by nature. 




Process Workflow Summary
========================

    Phase 1: Project Setup.
    Phase 2: Create (and Test) your server.




Phase 1: Project Setup
=========================================================================================
-- This phase is comprised of basic setup, installation of dependencies, development 
   environment setup, and essential files like server.js, .gitignore, and .env.
=========================================================================================

    // Project Setup:                           
        1. Issue-Index-App                                     -- Create a folder to store you application.
        2. npm init                                            -- Create a package.json file to start the project off (you can use npm inti -y to skip the questions).

    // Install express:
        3. npm install express                                 -- Install express (note: you can also type "npm i" to install).

    // Add .gitignore file for node_modules:        
        4. .gitignore > node_modules                           -- Add .gitignore file to ignore node_modules folder that was just added when you installed express.

    // Install application dependencies:
        5. npm install <dependencies>                          -- Install any other dependencies (if you need to at the outset of the project like mongoose).
        6. npm install --save-dev dotenv nodemon               -- Install development enviroment.

    // Create custom "devStart" script in package.json:     
        7. "devStart": "nodemon server.js"                     -- Running this command makes starting your server a little more streamlined.
        
    // Create initial application files:       
      8.1.   server.js                                       -- Creates a .js file for server code.
    
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes: 
            * Dont breeze through the npm init stage, take the time to setup the project correctly (i.e. server.js instead of index.js, etc.)
            * Submit everything AFTER you create the .gitignore file and add node_modules.
            * Install a developer enviroment as good practice, it makes things a lot easier in development even if you end up not using it.    
            * You can have multiple custom scripts. 
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////    



Phase 2: Create (and Test) your server:
=============================================================================================================
-- This phase creates the basic express server and suggested testing stategy to ensure everything is working.
=============================================================================================================

    2.1:  Import express and instantiate the express application:
        ---------------------------------------------------------
            const express = require('express');
            const app = express();
        ---------------------------------------------------------


    2.2: Create a (temporary) basic server to test the connection:
        * Note: It's a bit easier just to do the second variable method because integrated testing should be standard practice. see
                additional notes below for more details.

        ----------------------------------------------------------                     ----------------------------------------------------------
            app.listen(3000, function() {                                                 let server; 
                console.log('Your app is listening on port 3000');         or...          server = app.listen(3000, function() {   
            });                                                                               console.log(`Listening on port 3000...`);   
        ----------------------------------------------------------                        });
                                                                                       ----------------------------------------------------------

    2.3: Test your connection
        * In gitbash, you will can run the server by running the custom script "devStart" with "npm run devStart".
        * If successful, you will see something like this:

            -----------------------------------------------------------------------
                $ npm run devStart

                > basic-blog-app@1.0.0 devStart C:\Users\Admin\Issue-Index-Application
                > nodemon server.js

                [nodemon] 1.19.4
                [nodemon] to restart at any time, enter `rs`
                [nodemon] watching dir(s): *.*
                [nodemon] watching extensions: js,mjs,json
                [nodemon] starting `node server.js`
                Your app is listening on port 3000
            -----------------------------------------------------------------------

        * And when you go to "localhost:3000", you should see "Cannot GET /", which means that the server is working,
          but no routes are present yet! 


        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
        Notes:
            * It might seem like extra work to create a basic app.listen function that you will need to heavily modify, if not entirely remove because
              of the intricacies of creating a mongoose server because it might seem redundant, but experience has shown that you always want to double
              check your work to make sure you have a good point to reference back to where everything was functioning the way it is supposed to.
            * IF you want to get in the habit of creating a server and account for EVENTUAL test integration, creating the server the second way
              in step 2.2 is preferable. When the time comes, you would simply need to replace the port number (i.e. 3000) and the message when you
              integrate this into the runServer function.         
        ///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////






Resources
==========